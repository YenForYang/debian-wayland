<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="wayland-server_8h" kind="file" language="C++">
    <compoundname>wayland-server.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="wayland-server-core_8h" local="yes">wayland-server-core.h</includes>
    <includes local="yes">wayland-server-protocol.h</includes>
    <includedby refid="wayland-server_8c" local="yes">/dev/shm/libwayland/wayland/src/wayland-server.c</includedby>
    <includedby refid="wayland-shm_8c" local="yes">/dev/shm/libwayland/wayland/src/wayland-shm.c</includedby>
    <incdepgraph>
      <node id="72">
        <label>stdbool.h</label>
      </node>
      <node id="77">
        <label>stdarg.h</label>
      </node>
      <node id="68">
        <label>/dev/shm/libwayland/wayland/src/wayland-server.h</label>
        <link refid="wayland-server_8h"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>stdint.h</label>
      </node>
      <node id="75">
        <label>stddef.h</label>
      </node>
      <node id="70">
        <label>wayland-server-core.h</label>
        <link refid="wayland-server-core_8h"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>sys/types.h</label>
      </node>
      <node id="79">
        <label>wayland-server-protocol.h</label>
      </node>
      <node id="78">
        <label>wayland-version.h</label>
      </node>
      <node id="74">
        <label>math.h</label>
      </node>
      <node id="73">
        <label>wayland-util.h</label>
        <link refid="wayland-util_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="81">
        <label>/dev/shm/libwayland/wayland/src/wayland-server.c</label>
        <link refid="wayland-server_8c"/>
      </node>
      <node id="80">
        <label>/dev/shm/libwayland/wayland/src/wayland-server.h</label>
        <link refid="wayland-server_8h"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>/dev/shm/libwayland/wayland/src/wayland-shm.c</label>
        <link refid="wayland-shm_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structwl__object" prot="public">wl_object</innerclass>
    <innerclass refid="structwl__resource" prot="public">wl_resource</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="wayland-server_8h_1a86592c8dfc359094d1cfd8e6abb47cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t wl_client_add_resource</definition>
        <argsstring>(struct wl_client *client, struct wl_resource *resource) WL_DEPRECATED</argsstring>
        <name>wl_client_add_resource</name>
        <param>
          <type>struct <ref refid="structwl__client" kindref="compound">wl_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>struct <ref refid="structwl__resource" kindref="compound">wl_resource</ref> *</type>
          <declname>resource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="wayland-server_8h_1a8a87f8712025b4d92e5fe718ea9d745d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__resource" kindref="compound">wl_resource</ref> *</type>
        <definition>struct wl_resource* wl_client_add_object</definition>
        <argsstring>(struct wl_client *client, const struct wl_interface *interface, const void *implementation, uint32_t id, void *data) WL_DEPRECATED</argsstring>
        <name>wl_client_add_object</name>
        <param>
          <type>struct <ref refid="structwl__client" kindref="compound">wl_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structwl__interface" kindref="compound">wl_interface</ref> *</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>implementation</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="wayland-server_8h_1ab9570639a66efe77ae813c7edaf29c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__resource" kindref="compound">wl_resource</ref> *</type>
        <definition>struct wl_resource* wl_client_new_object</definition>
        <argsstring>(struct wl_client *client, const struct wl_interface *interface, const void *implementation, void *data) WL_DEPRECATED</argsstring>
        <name>wl_client_new_object</name>
        <param>
          <type>struct <ref refid="structwl__client" kindref="compound">wl_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const struct <ref refid="structwl__interface" kindref="compound">wl_interface</ref> *</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>implementation</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="wayland-server_8h_1a81dc2de5891114d1ae89449a048f3b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__global" kindref="compound">wl_global</ref> *</type>
        <definition>struct wl_global* wl_display_add_global</definition>
        <argsstring>(struct wl_display *display, const struct wl_interface *interface, void *data, wl_global_bind_func_t bind) WL_DEPRECATED</argsstring>
        <name>wl_display_add_global</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>const struct <ref refid="structwl__interface" kindref="compound">wl_interface</ref> *</type>
          <declname>interface</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="wayland-server-core_8h_1aa43e45303203c14431e00fedaa3ec156" kindref="member">wl_global_bind_func_t</ref></type>
          <declname>bind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="wayland-server_8h_1ab9bbf24496934f296decd98ebf7940b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wl_display_remove_global</definition>
        <argsstring>(struct wl_display *display, struct wl_global *global) WL_DEPRECATED</argsstring>
        <name>wl_display_remove_global</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>struct <ref refid="structwl__global" kindref="compound">wl_global</ref> *</type>
          <declname>global</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.h" line="95" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Include the server API, deprecations and protocol C API. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>Use of this header file is discouraged. Prefer including <ref refid="wayland-server-core_8h" kindref="compound">wayland-server-core.h</ref> instead, which does not include the server protocol header and as such only defines the library API, excluding the deprecated API below. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>©<sp/>2008<sp/>Kristian<sp/>Høgsberg</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>(including<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>next<sp/>paragraph)<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor">#ifndef<sp/>WAYLAND_SERVER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WAYLAND_SERVER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wayland-server-core_8h" kindref="compound">wayland-server-core.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>The<sp/>user<sp/>can<sp/>set<sp/>this<sp/>macro<sp/>to<sp/>hide<sp/>the<sp/>wl_object,<sp/>wl_resource<sp/>and<sp/>wl_buffer</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>objects<sp/>alongside<sp/>the<sp/>associated<sp/>API.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>The<sp/>structs<sp/>were<sp/>meant<sp/>to<sp/>be<sp/>opaque,<sp/>although<sp/>we<sp/>missed<sp/>that<sp/>in<sp/>the<sp/>early<sp/>days.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>NOTE:<sp/>the<sp/>list<sp/>of<sp/>structs,<sp/>functions,<sp/>etc<sp/>in<sp/>this<sp/>section<sp/>MUST<sp/>NEVER<sp/>GROW.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Otherwise<sp/>we<sp/>will<sp/>break<sp/>forward<sp/>compatibility<sp/>and<sp/>applications<sp/>that<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>build<sp/>fine<sp/>will<sp/>no<sp/>longer<sp/>be<sp/>able<sp/>to<sp/>do<sp/>so.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WL_HIDE_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structwl__object" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__object" kindref="compound">wl_object</ref><sp/>{</highlight></codeline>
<codeline lineno="59" refid="structwl__object_1af663788be73eae7d567f044f8f9cbfb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__interface" kindref="compound">wl_interface</ref><sp/>*<ref refid="structwl__object_1af663788be73eae7d567f044f8f9cbfb9" kindref="member">interface</ref>;</highlight></codeline>
<codeline lineno="60" refid="structwl__object_1a7478578f273f986624ecc26acfd4e6c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structwl__object_1a7478578f273f986624ecc26acfd4e6c2" kindref="member">implementation</ref>;</highlight></codeline>
<codeline lineno="61" refid="structwl__object_1a96193ebafbba8785e03ff9dd8e39d30c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structwl__object_1a96193ebafbba8785e03ff9dd8e39d30c" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__resource" kindref="compound">wl_resource</ref><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__object" kindref="compound">wl_object</ref><sp/>object;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wayland-server-core_8h_1aa3d1d24261bd732fc15dfb354aec17f1" kindref="member">wl_resource_destroy_func_t</ref><sp/>destroy;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__list" kindref="compound">wl_list</ref><sp/>link;</highlight></codeline>
<codeline lineno="68" refid="structwl__resource_1aa7be4aecb5c00e96bebbd10fbaac7127" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__signal" kindref="compound">wl_signal</ref><sp/>destroy_signal;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__client" kindref="compound">wl_client</ref><sp/>*client;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">uint32_t</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="wayland-server_8h_1a86592c8dfc359094d1cfd8e6abb47cb7" kindref="member">wl_client_add_resource</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__client" kindref="compound">wl_client</ref><sp/>*client,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__resource" kindref="compound">wl_resource</ref><sp/>*resource)<sp/><ref refid="wayland-util_8h_1a9ef5a521a018de9c5b28a5ef9909cd33" kindref="member">WL_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__resource" kindref="compound">wl_resource</ref><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="wayland-server_8h_1a8a87f8712025b4d92e5fe718ea9d745d" kindref="member">wl_client_add_object</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__client" kindref="compound">wl_client</ref><sp/>*<ref refid="structwl__resource_1a6ceb1559a387f584ac68c5ccff744b70" kindref="member">client</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__interface" kindref="compound">wl_interface</ref><sp/>*<ref refid="structwl__object_1af663788be73eae7d567f044f8f9cbfb9" kindref="member">interface</ref>,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structwl__object_1a7478578f273f986624ecc26acfd4e6c2" kindref="member">implementation</ref>,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structwl__resource_1a04550a669725ca66765ec5e1f04b98e5" kindref="member">data</ref>)<sp/><ref refid="wayland-util_8h_1a9ef5a521a018de9c5b28a5ef9909cd33" kindref="member">WL_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__resource" kindref="compound">wl_resource</ref><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="wayland-server_8h_1ab9570639a66efe77ae813c7edaf29c21" kindref="member">wl_client_new_object</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__client" kindref="compound">wl_client</ref><sp/>*<ref refid="structwl__resource_1a6ceb1559a387f584ac68c5ccff744b70" kindref="member">client</ref>,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__interface" kindref="compound">wl_interface</ref><sp/>*<ref refid="structwl__object_1af663788be73eae7d567f044f8f9cbfb9" kindref="member">interface</ref>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structwl__object_1a7478578f273f986624ecc26acfd4e6c2" kindref="member">implementation</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structwl__resource_1a04550a669725ca66765ec5e1f04b98e5" kindref="member">data</ref>)<sp/><ref refid="wayland-util_8h_1a9ef5a521a018de9c5b28a5ef9909cd33" kindref="member">WL_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structwl__global" kindref="compound">wl_global</ref><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="wayland-server_8h_1a81dc2de5891114d1ae89449a048f3b6c" kindref="member">wl_display_add_global</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__display" kindref="compound">wl_display</ref><sp/>*<ref refid="structwl__global_1a3ac41deda1861eebace2336684054527" kindref="member">display</ref>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__interface" kindref="compound">wl_interface</ref><sp/>*<ref refid="structwl__object_1af663788be73eae7d567f044f8f9cbfb9" kindref="member">interface</ref>,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structwl__global_1a72c4c64c0f0ddf348caa18d8824c50af" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="wayland-server-core_8h_1aa43e45303203c14431e00fedaa3ec156" kindref="member">wl_global_bind_func_t</ref><sp/><ref refid="structwl__global_1acc985dddfc0a75b454187c062c054e67" kindref="member">bind</ref>)<sp/><ref refid="wayland-util_8h_1a9ef5a521a018de9c5b28a5ef9909cd33" kindref="member">WL_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="wayland-server_8h_1ab9bbf24496934f296decd98ebf7940b9" kindref="member">wl_display_remove_global</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__display" kindref="compound">wl_display</ref><sp/>*<ref refid="structwl__global_1a3ac41deda1861eebace2336684054527" kindref="member">display</ref>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structwl__global" kindref="compound">wl_global</ref><sp/>*global)<sp/><ref refid="wayland-util_8h_1a9ef5a521a018de9c5b28a5ef9909cd33" kindref="member">WL_DEPRECATED</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wayland-server-protocol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/dev/shm/libwayland/wayland/src/wayland-server.h"/>
  </compounddef>
</doxygen>
