<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structwl__display" kind="struct" language="C++" prot="public">
    <compoundname>wl_display</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structwl__display_1a09b21b500ff6935f6c134a662fc1651a" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__event__loop" kindref="compound">wl_event_loop</ref> *</type>
        <definition>struct wl_event_loop* wl_display::loop</definition>
        <argsstring></argsstring>
        <name>loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="86" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1aef9cf1c5f1b4fcaa4d7607bd82d0a093" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int wl_display::run</definition>
        <argsstring></argsstring>
        <name>run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="87" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1a864360d97771499c07e33a4ba3948bf7" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t wl_display::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="89" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1a2178a84b8d12090f53299a3d87a6f433" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t wl_display::serial</definition>
        <argsstring></argsstring>
        <name>serial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1adacf20b879ad10677d0442c3a5469923" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__list" kindref="compound">wl_list</ref></type>
        <definition>struct wl_list wl_display::registry_resource_list</definition>
        <argsstring></argsstring>
        <name>registry_resource_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1a8eafb443ae6bcbf1ee8fc227aa5c1694" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__list" kindref="compound">wl_list</ref></type>
        <definition>struct wl_list wl_display::global_list</definition>
        <argsstring></argsstring>
        <name>global_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1ad8445133a3aec3add2022011d1c5e8b2" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__list" kindref="compound">wl_list</ref></type>
        <definition>struct wl_list wl_display::socket_list</definition>
        <argsstring></argsstring>
        <name>socket_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1a4a646a3a3a91ed8797c3353c79a802c1" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__list" kindref="compound">wl_list</ref></type>
        <definition>struct wl_list wl_display::client_list</definition>
        <argsstring></argsstring>
        <name>client_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1a662a3081bed0349619bc7fe952fbb903" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__list" kindref="compound">wl_list</ref></type>
        <definition>struct wl_list wl_display::protocol_loggers</definition>
        <argsstring></argsstring>
        <name>protocol_loggers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1abb413b6d494454c0fc5eb801b7009e4d" prot="public" static="no" mutable="no">
        <type>struct wl_priv_signal</type>
        <definition>struct wl_priv_signal wl_display::destroy_signal</definition>
        <argsstring></argsstring>
        <name>destroy_signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1af4eb55355f6bba19c2c4d519fa9a770e" prot="public" static="no" mutable="no">
        <type>struct wl_priv_signal</type>
        <definition>struct wl_priv_signal wl_display::create_client_signal</definition>
        <argsstring></argsstring>
        <name>create_client_signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1a34b8b1a96ad8a692986c5c0889376cfa" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__array" kindref="compound">wl_array</ref></type>
        <definition>struct wl_array wl_display::additional_shm_formats</definition>
        <argsstring></argsstring>
        <name>additional_shm_formats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="90" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1ab8546912b40cbd9a27db5483cdf4adf0" prot="public" static="no" mutable="no">
        <type><ref refid="wayland-server-core_8h_1a869353bf26daf40e7317cd00473f8dcd" kindref="member">wl_display_global_filter_func_t</ref></type>
        <definition>wl_display_global_filter_func_t wl_display::global_filter</definition>
        <argsstring></argsstring>
        <name>global_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="103" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwl__display_1a4fe5fcd6fefd4a542c18e2426c3ce47b" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* wl_display::global_filter_data</definition>
        <argsstring></argsstring>
        <name>global_filter_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="104" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structwl__display_1aa2436b6a0b56cd65d8f6e33b76cd292c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__client" kindref="compound">wl_client</ref> *</type>
        <definition>struct wl_client * wl_client_create</definition>
        <argsstring>(struct wl_display *display, int fd)</argsstring>
        <name>wl_client_create</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Create a client for the given file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor for the socket to the client </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new client object or NULL on failure.</para></simplesect>
Given a file descriptor corresponding to one end of a socket, this function will create a <ref refid="structwl__client" kindref="compound">wl_client</ref> struct and add the new client to the compositors client list. At that point, the client is initialized and ready to run, as if the client had connected to the servers listening socket. When the client eventually sends requests to the compositor, the <ref refid="structwl__client" kindref="compound">wl_client</ref> argument to the request handler will be the <ref refid="structwl__client" kindref="compound">wl_client</ref> returned from this function.</para><para>The other end of the socket can be passed to wl_display_connect_to_fd() on the client side or used with the WAYLAND_SOCKET environment variable on the client side.</para><para>Listeners added with <ref refid="wayland-server_8c_1a8c1cdf513c91fa498c4d9259eae3ed71" kindref="member">wl_display_add_client_created_listener()</ref> will be notified by this function after the client is fully constructed.</para><para>On failure this function sets errno accordingly and returns NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="502" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="502" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1ac3dd9a1294b2b6103228a55e08709e9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
        <definition>struct wl_display * wl_display_create</definition>
        <argsstring>(void)</argsstring>
        <name>wl_display_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create Wayland display object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Wayland display object. Null if failed to create</para></simplesect>
This creates the <ref refid="structwl__display" kindref="compound">wl_display</ref> object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1001" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1001" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1acd9ad2e1ca3ffb0ba0f1b77ae616f8ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wl_display_destroy</definition>
        <argsstring>(struct wl_display *display)</argsstring>
        <name>wl_display_destroy</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <briefdescription>
<para>Destroy Wayland display object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The Wayland display object which should be destroyed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None.</para></simplesect>
This function emits the <ref refid="structwl__display" kindref="compound">wl_display</ref> destroy signal, releases all the sockets added to this display, free&apos;s all the globals associated with this display, free&apos;s memory of additional shared memory formats and destroy the display object.</para><para><simplesect kind="see"><para><ref refid="wayland-server-core_8h_1a9ea24547f07538f2a326c42c7793b937" kindref="member">wl_display_add_destroy_listener</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1087" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1087" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1a3905b9734d8bb84f2c851bb4abbc52f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wl_display_set_global_filter</definition>
        <argsstring>(struct wl_display *display, wl_display_global_filter_func_t filter, void *data)</argsstring>
        <name>wl_display_set_global_filter</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type><ref refid="wayland-server-core_8h_1a869353bf26daf40e7317cd00473f8dcd" kindref="member">wl_display_global_filter_func_t</ref></type>
          <declname>filter</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set a filter function for global objects. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The Wayland display object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filter</parametername>
</parameternamelist>
<parameterdescription>
<para>The global filter funtion. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>User data to be associated with the global filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None.</para></simplesect>
Set a filter for the <ref refid="structwl__display" kindref="compound">wl_display</ref> to advertise or hide global objects to clients. The set filter will be used during <ref refid="structwl__global" kindref="compound">wl_global</ref> advertisment to determine whether a global object should be advertised to a given client, and during <ref refid="structwl__global" kindref="compound">wl_global</ref> binding to determine whether a given client should be allowed to bind to a global.</para><para>Clients that try to bind to a global that was filtered out will have an error raised.</para><para>Setting the filter NULL will result in all globals being advertised to all clients. The default is no filter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1132" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1132" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1a43f04f76ea1457edcf37c95de68b29ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t wl_display_get_serial</definition>
        <argsstring>(struct wl_display *display)</argsstring>
        <name>wl_display_get_serial</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <briefdescription>
<para>Get the current serial number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object</para></parameterdescription>
</parameteritem>
</parameterlist>
This function returns the most recent serial number, but does not increment it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1219" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1219" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1a145f7d3e4b41fc9014c11bf01bd7eb4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t wl_display_next_serial</definition>
        <argsstring>(struct wl_display *display)</argsstring>
        <name>wl_display_next_serial</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <briefdescription>
<para>Get the next serial number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object</para></parameterdescription>
</parameteritem>
</parameterlist>
This function increments the display serial number and returns the new value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1234" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1234" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1ab50365739904f91579a66f4b054a3ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void wl_display_destroy_clients</definition>
        <argsstring>(struct wl_display *display)</argsstring>
        <name>wl_display_destroy_clients</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <briefdescription>
<para>Destroy all clients connected to the display. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object</para></parameterdescription>
</parameteritem>
</parameterlist>
This function should be called right before <ref refid="structwl__display_1acd9ad2e1ca3ffb0ba0f1b77ae616f8ee" kindref="member">wl_display_destroy()</ref> to ensure all client resources are closed properly. Destroying a client from within <ref refid="structwl__display_1ab50365739904f91579a66f4b054a3ecb" kindref="member">wl_display_destroy_clients()</ref> is safe, but creating one will leak resources and raise a warning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1294" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1294" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1a54f1cf58cc74cd44c889b2cdf029345d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wl_display_add_socket_fd</definition>
        <argsstring>(struct wl_display *display, int sock_fd)</argsstring>
        <name>wl_display_add_socket_fd</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sock_fd</declname>
        </param>
        <briefdescription>
<para>Add a socket with an existing fd to Wayland display for the clients to connect. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>Wayland display to which the socket should be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sock_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The existing socket file descriptor to be used </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success. -1 if failed.</para></simplesect>
The existing socket fd must already be created, opened, and locked. The fd must be properly set to CLOEXEC and bound to a socket file with both bind() and listen() already called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1509" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1509" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1a9fdf7264f0a3a28a75c141db252067b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int wl_display_add_socket</definition>
        <argsstring>(struct wl_display *display, const char *name)</argsstring>
        <name>wl_display_add_socket</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Add a socket to Wayland display for the clients to connect. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>Wayland display to which the socket should be added. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the Unix socket. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if success. -1 if failed.</para></simplesect>
This adds a Unix socket to Wayland display which can be used by clients to connect to Wayland display.</para><para>If NULL is passed as name, then it would look for WAYLAND_DISPLAY env variable for the socket name. If WAYLAND_DISPLAY is not set, then default wayland-0 is used.</para><para>The Unix socket will be created in the directory pointed to by environment variable XDG_RUNTIME_DIR. If XDG_RUNTIME_DIR is not set, then this function fails and returns -1.</para><para>The length of socket path, i.e., the path set in XDG_RUNTIME_DIR and the socket name, must not exceed the maximum length of a Unix socket path. The function also fails if the user do not have write permission in the XDG_RUNTIME_DIR path or if the socket name is already in use. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1565" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1565" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1a4dc118c686e362aba0b3c6c8874efc3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__protocol__logger" kindref="compound">wl_protocol_logger</ref> *</type>
        <definition>struct wl_protocol_logger * wl_display_add_protocol_logger</definition>
        <argsstring>(struct wl_display *display, wl_protocol_logger_func_t func, void *user_data)</argsstring>
        <name>wl_display_add_protocol_logger</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type><ref refid="wayland-server-core_8h_1a420c37c10e960e6fb0968e2c30628006" kindref="member">wl_protocol_logger_func_t</ref></type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Adds a new protocol logger. </para>        </briefdescription>
        <detaileddescription>
<para>When a new protocol message arrives or is sent from the server all the protocol logger functions will be called, carrying the <emphasis>user_data</emphasis> pointer, the type of the message (request or event) and the actual message. The lifetime of the messages passed to the logger function ends when they return so the messages cannot be stored and accessed later.</para><para><emphasis>errno</emphasis> is set on error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to call to log a new protocol message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The user data pointer to pass to <emphasis>func</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The protol logger object on success, NULL on failure.</para></simplesect>
<simplesect kind="see"><para><ref refid="structwl__protocol__logger_1ac5bfbf098cbecb788190bc12e3becad7" kindref="member">wl_protocol_logger_destroy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1731" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1731" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1ad806e5d1f937b32f62998c44a0a16421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t *</type>
        <definition>uint32_t * wl_display_add_shm_format</definition>
        <argsstring>(struct wl_display *display, uint32_t format)</argsstring>
        <name>wl_display_add_shm_format</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Add support for a wl_shm pixel format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The wl_shm pixel format to advertise </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the wl_shm format that was added to the list or NULL if adding it to the list failed.</para></simplesect>
Add the specified wl_shm format to the list of formats the wl_shm object advertises when a client binds to it. Adding a format to the list means that clients will know that the compositor supports this format and may use it for creating wl_shm buffers. The compositor must be able to handle the pixel format when a client requests it.</para><para>The compositor by default supports WL_SHM_FORMAT_ARGB8888 and WL_SHM_FORMAT_XRGB8888. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1784" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1784" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="structwl__display_1a99b9c187d88633fa5ba86d1424f06d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__list" kindref="compound">wl_list</ref> *</type>
        <definition>struct wl_list * wl_display_get_client_list</definition>
        <argsstring>(struct wl_display *display)</argsstring>
        <name>wl_display_get_client_list</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <briefdescription>
<para>Get the list of currently connected clients. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object</para></parameterdescription>
</parameteritem>
</parameterlist>
This function returns a pointer to the list of clients currently connected to the display. You can iterate on the list by using the <emphasis>wl_client_for_each</emphasis> macro. The returned value is valid for the lifetime of the <emphasis>display</emphasis>. You must not modify the returned list, but only access it.</para><para><simplesect kind="see"><para><ref refid="wayland-server-core_8h_1af1e9ad8dd32ea89265936930cd173ec5" kindref="member">wl_client_for_each()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="structwl__client_1ade7bddc335d60cb95f9d1bd4fb60d25b" kindref="member">wl_client_get_link()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="structwl__client_1aec831218471327f37b4e1f11b571545d" kindref="member">wl_client_from_link()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1835" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1835" bodyend="1838"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structwl__display_1acfc1920ead337417e5d546fd01af1806" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__array" kindref="compound">wl_array</ref> *</type>
        <definition>struct wl_array * wl_display_get_additional_shm_formats</definition>
        <argsstring>(struct wl_display *display)</argsstring>
        <name>wl_display_get_additional_shm_formats</name>
        <param>
          <type>struct <ref refid="structwl__display" kindref="compound">wl_display</ref> *</type>
          <declname>display</declname>
        </param>
        <briefdescription>
<para>Get list of additional wl_shm pixel formats. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>display</parametername>
</parameternamelist>
<parameterdescription>
<para>The display object</para></parameterdescription>
</parameteritem>
</parameterlist>
This function returns the list of addition wl_shm pixel formats that the compositor supports. WL_SHM_FORMAT_ARGB8888 and WL_SHM_FORMAT_XRGB8888 are always supported and not included in the array, but all formats added through <ref refid="structwl__display_1ad806e5d1f937b32f62998c44a0a16421" kindref="member">wl_display_add_shm_format()</ref> will be in the array.</para><para><simplesect kind="see"><para><ref refid="structwl__display_1ad806e5d1f937b32f62998c44a0a16421" kindref="member">wl_display_add_shm_format()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="1813" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="1813" bodyend="1816"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="24">
        <label>wl_client</label>
        <link refid="structwl__client"/>
        <childnode refid="23" relation="usage">
          <edgelabel>link</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>display_resource</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>source</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>display</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>wl_resource</label>
        <link refid="structwl__resource"/>
        <childnode refid="26" relation="usage">
          <edgelabel>deprecated_destroy_signal</edgelabel>
          <edgelabel>destroy_signal</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>object</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>link</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>client</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>destroy</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>dispatcher</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>wl_array</label>
        <link refid="structwl__array"/>
      </node>
      <node id="21">
        <label>wl_display</label>
        <link refid="structwl__display"/>
        <childnode refid="22" relation="usage">
          <edgelabel>loop</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>client_list</edgelabel>
          <edgelabel>global_list</edgelabel>
          <edgelabel>registry_resource_list</edgelabel>
          <edgelabel>socket_list</edgelabel>
          <edgelabel>protocol_loggers</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>global_filter</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>additional_shm_formats</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>wl_event_source</label>
        <link refid="structwl__event__source"/>
      </node>
      <node id="22">
        <label>wl_event_loop</label>
        <link refid="structwl__event__loop"/>
      </node>
      <node id="23">
        <label>wl_list</label>
        <link refid="structwl__list"/>
        <childnode refid="23" relation="usage">
          <edgelabel>prev</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>wl_message</label>
        <link refid="structwl__message"/>
        <childnode refid="28" relation="usage">
          <edgelabel>types</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>wl_object</label>
        <link refid="structwl__object"/>
        <childnode refid="28" relation="usage">
          <edgelabel>interface</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>wl_interface</label>
        <link refid="structwl__interface"/>
        <childnode refid="29" relation="usage">
          <edgelabel>events</edgelabel>
          <edgelabel>methods</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>wl_signal</label>
        <link refid="structwl__signal"/>
        <childnode refid="23" relation="usage">
          <edgelabel>listener_list</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/dev/shm/libwayland/wayland/src/wayland-server.c" line="85" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server.c" bodystart="85" bodyend="105"/>
    <listofallmembers>
      <member refid="structwl__display_1a34b8b1a96ad8a692986c5c0889376cfa" prot="public" virt="non-virtual"><scope>wl_display</scope><name>additional_shm_formats</name></member>
      <member refid="structwl__display_1a4a646a3a3a91ed8797c3353c79a802c1" prot="public" virt="non-virtual"><scope>wl_display</scope><name>client_list</name></member>
      <member refid="structwl__display_1af4eb55355f6bba19c2c4d519fa9a770e" prot="public" virt="non-virtual"><scope>wl_display</scope><name>create_client_signal</name></member>
      <member refid="structwl__display_1abb413b6d494454c0fc5eb801b7009e4d" prot="public" virt="non-virtual"><scope>wl_display</scope><name>destroy_signal</name></member>
      <member refid="structwl__display_1ab8546912b40cbd9a27db5483cdf4adf0" prot="public" virt="non-virtual"><scope>wl_display</scope><name>global_filter</name></member>
      <member refid="structwl__display_1a4fe5fcd6fefd4a542c18e2426c3ce47b" prot="public" virt="non-virtual"><scope>wl_display</scope><name>global_filter_data</name></member>
      <member refid="structwl__display_1a8eafb443ae6bcbf1ee8fc227aa5c1694" prot="public" virt="non-virtual"><scope>wl_display</scope><name>global_list</name></member>
      <member refid="structwl__display_1a864360d97771499c07e33a4ba3948bf7" prot="public" virt="non-virtual"><scope>wl_display</scope><name>id</name></member>
      <member refid="structwl__display_1a09b21b500ff6935f6c134a662fc1651a" prot="public" virt="non-virtual"><scope>wl_display</scope><name>loop</name></member>
      <member refid="structwl__display_1a662a3081bed0349619bc7fe952fbb903" prot="public" virt="non-virtual"><scope>wl_display</scope><name>protocol_loggers</name></member>
      <member refid="structwl__display_1adacf20b879ad10677d0442c3a5469923" prot="public" virt="non-virtual"><scope>wl_display</scope><name>registry_resource_list</name></member>
      <member refid="structwl__display_1aef9cf1c5f1b4fcaa4d7607bd82d0a093" prot="public" virt="non-virtual"><scope>wl_display</scope><name>run</name></member>
      <member refid="structwl__display_1a2178a84b8d12090f53299a3d87a6f433" prot="public" virt="non-virtual"><scope>wl_display</scope><name>serial</name></member>
      <member refid="structwl__display_1ad8445133a3aec3add2022011d1c5e8b2" prot="public" virt="non-virtual"><scope>wl_display</scope><name>socket_list</name></member>
      <member refid="structwl__display_1aa2436b6a0b56cd65d8f6e33b76cd292c" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_client_create</name></member>
      <member refid="structwl__display_1a4dc118c686e362aba0b3c6c8874efc3d" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_add_protocol_logger</name></member>
      <member refid="structwl__display_1ad806e5d1f937b32f62998c44a0a16421" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_add_shm_format</name></member>
      <member refid="structwl__display_1a9fdf7264f0a3a28a75c141db252067b8" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_add_socket</name></member>
      <member refid="structwl__display_1a54f1cf58cc74cd44c889b2cdf029345d" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_add_socket_fd</name></member>
      <member refid="structwl__display_1ac3dd9a1294b2b6103228a55e08709e9f" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_create</name></member>
      <member refid="structwl__display_1acd9ad2e1ca3ffb0ba0f1b77ae616f8ee" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_destroy</name></member>
      <member refid="structwl__display_1ab50365739904f91579a66f4b054a3ecb" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_destroy_clients</name></member>
      <member refid="structwl__display_1acfc1920ead337417e5d546fd01af1806" prot="private" virt="non-virtual"><scope>wl_display</scope><name>wl_display_get_additional_shm_formats</name></member>
      <member refid="structwl__display_1a99b9c187d88633fa5ba86d1424f06d7f" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_get_client_list</name></member>
      <member refid="structwl__display_1a43f04f76ea1457edcf37c95de68b29ef" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_get_serial</name></member>
      <member refid="structwl__display_1a145f7d3e4b41fc9014c11bf01bd7eb4f" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_next_serial</name></member>
      <member refid="structwl__display_1a3905b9734d8bb84f2c851bb4abbc52f8" prot="public" virt="non-virtual"><scope>wl_display</scope><name>wl_display_set_global_filter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
