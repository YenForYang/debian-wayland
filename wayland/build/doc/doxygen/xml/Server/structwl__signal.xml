<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structwl__signal" kind="class" language="C++" prot="public">
    <compoundname>wl_signal</compoundname>
    <includes refid="wayland-server-core_8h" local="no">wayland-server-core.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structwl__signal_1a756bd56198fb87698f165e6c9464e75c" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structwl__list" kindref="compound">wl_list</ref></type>
        <definition>struct wl_list wl_signal::listener_list</definition>
        <argsstring></argsstring>
        <name>listener_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server-core.h" line="389" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server-core.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structwl__signal_1aeb25ddd9c813189203d15723e983b320" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void wl_signal_init</definition>
        <argsstring>(struct wl_signal *signal)</argsstring>
        <name>wl_signal_init</name>
        <param>
          <type>struct <ref refid="structwl__signal" kindref="compound">wl_signal</ref> *</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
<para>Initialize a new <ref refid="structwl__signal" kindref="compound">wl_signal</ref> for use. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal that will be initialized </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server-core.h" line="416" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server-core.h" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="structwl__signal_1aa8bcd3b8e250cfe35ed064d5af589096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void wl_signal_add</definition>
        <argsstring>(struct wl_signal *signal, struct wl_listener *listener)</argsstring>
        <name>wl_signal_add</name>
        <param>
          <type>struct <ref refid="structwl__signal" kindref="compound">wl_signal</ref> *</type>
          <declname>signal</declname>
        </param>
        <param>
          <type>struct <ref refid="structwl__listener" kindref="compound">wl_listener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
<para>Add the specified listener to this signal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal that will emit events to the listener </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>listener</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener to add </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server-core.h" line="429" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server-core.h" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="structwl__signal_1ab0ade7ac929136ad457cc1e0f34f9e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structwl__listener" kindref="compound">wl_listener</ref> *</type>
        <definition>static struct wl_listener * wl_signal_get</definition>
        <argsstring>(struct wl_signal *signal, wl_notify_func_t notify)</argsstring>
        <name>wl_signal_get</name>
        <param>
          <type>struct <ref refid="structwl__signal" kindref="compound">wl_signal</ref> *</type>
          <declname>signal</declname>
        </param>
        <param>
          <type><ref refid="wayland-server-core_8h_1a1db9aad922e07db2a6ad50d151d49a50" kindref="member">wl_notify_func_t</ref></type>
          <declname>notify</declname>
        </param>
        <briefdescription>
<para>Gets the listener struct for the specified callback. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal that contains the specified listener </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notify</parametername>
</parameternamelist>
<parameterdescription>
<para>The listener that is the target of this search </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the list item that corresponds to the specified listener, or NULL if none was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server-core.h" line="444" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server-core.h" bodystart="444" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="structwl__signal_1afe73f44f7f1b517c9c0ba90829c93309" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void wl_signal_emit</definition>
        <argsstring>(struct wl_signal *signal, void *data)</argsstring>
        <name>wl_signal_emit</name>
        <param>
          <type>struct <ref refid="structwl__signal" kindref="compound">wl_signal</ref> *</type>
          <declname>signal</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Emits this signal, notifying all registered listeners. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para>The signal object that will emit the signal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data that will be emitted with the signal </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/dev/shm/libwayland/wayland/src/wayland-server-core.h" line="463" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server-core.h" bodystart="463" bodyend="469"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A source of a type of observable event. </para>    </briefdescription>
    <detaileddescription>
<para>Signals are recognized points where significant events can be observed. Compositors as well as the server can provide signals. Observers are <ref refid="structwl__listener" kindref="compound">wl_listener</ref>&apos;s that are added through <ref refid="structwl__signal_1aa8bcd3b8e250cfe35ed064d5af589096" kindref="member">wl_signal_add</ref>. Signals are emitted using <ref refid="structwl__signal_1afe73f44f7f1b517c9c0ba90829c93309" kindref="member">wl_signal_emit</ref>, which will invoke all listeners until that listener is removed by <ref refid="structwl__list_1aa16d739aaa041dde9d34ad4bcb4d4c83" kindref="member">wl_list_remove()</ref> (or whenever the signal is destroyed).</para><para><simplesect kind="see"><para><ref refid="structwl__listener" kindref="compound">wl_listener</ref> for more information on using <ref refid="structwl__signal" kindref="compound">wl_signal</ref> </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="161">
        <label>wl_list</label>
        <link refid="structwl__list"/>
        <childnode refid="161" relation="usage">
          <edgelabel>prev</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="160">
        <label>wl_signal</label>
        <link refid="structwl__signal"/>
        <childnode refid="161" relation="usage">
          <edgelabel>listener_list</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/dev/shm/libwayland/wayland/src/wayland-server-core.h" line="405" column="1" bodyfile="/dev/shm/libwayland/wayland/src/wayland-server-core.h" bodystart="405" bodyend="407"/>
    <listofallmembers>
      <member refid="structwl__signal_1a756bd56198fb87698f165e6c9464e75c" prot="public" virt="non-virtual"><scope>wl_signal</scope><name>listener_list</name></member>
      <member refid="structwl__signal_1aa8bcd3b8e250cfe35ed064d5af589096" prot="public" virt="non-virtual"><scope>wl_signal</scope><name>wl_signal_add</name></member>
      <member refid="structwl__signal_1afe73f44f7f1b517c9c0ba90829c93309" prot="public" virt="non-virtual"><scope>wl_signal</scope><name>wl_signal_emit</name></member>
      <member refid="structwl__signal_1ab0ade7ac929136ad457cc1e0f34f9e10" prot="public" virt="non-virtual"><scope>wl_signal</scope><name>wl_signal_get</name></member>
      <member refid="structwl__signal_1aeb25ddd9c813189203d15723e983b320" prot="public" virt="non-virtual"><scope>wl_signal</scope><name>wl_signal_init</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
