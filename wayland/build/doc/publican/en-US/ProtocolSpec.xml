<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % BOOK_ENTITIES SYSTEM "Wayland.ent">
%BOOK_ENTITIES;
]>
<appendix id="appe-Wayland-Protocol">
  <title>Wayland Protocol Specification</title>
  <para>
    <literallayout>
    Copyright © 2008-2011 Kristian Høgsberg
    Copyright © 2010-2011 Intel Corporation
    Copyright © 2012-2013 Collabora, Ltd.

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice (including the
    next paragraph) shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
  </literallayout>
  </para>
  <section id="protocol-spec-wl_display">
    <title>wl_display
	- core global object</title>
    <para>
      The core global object.  This is a special singleton object.  It
      is used for internal Wayland protocol features.
    </para>
    <section>
      <title>Requests provided by wl_display</title>
      <section id="protocol-spec-wl_display-request-sync">
        <title>wl_display::sync
        - asynchronous roundtrip</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>callback</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_callback">wl_callback</link>
            - callback object for the sync request</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The sync request asks the server to emit the 'done' event
	on the returned wl_callback object.  Since requests are
	handled in-order and events are delivered in-order, this can
	be used as a barrier to ensure all previous requests and the
	resulting events have been handled.</para>
        <para>	The object returned by this request will be destroyed by the
	compositor after the callback is fired and as such the client must not
	attempt to use it after that point.</para>
        <para>	The callback_data passed in the callback is the event serial.
      </para>
      </section>
      <section id="protocol-spec-wl_display-request-get_registry">
        <title>wl_display::get_registry
        - get global registry object</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>registry</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_registry">wl_registry</link>
            - global registry object</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request creates a registry object that allows the client
	to list and bind the global objects available from the
	compositor.</para>
        <para>	It should be noted that the server side resources consumed in
	response to a get_registry request can only be released when the
	client disconnects, not when the client side proxy is destroyed.
	Therefore, clients should invoke get_registry as infrequently as
	possible to avoid wasting memory.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_display</title>
      <section id="protocol-spec-wl_display-event-error">
        <title>wl_display::error
        - fatal error event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>object_id</term>
              <listitem>
                <simpara>object
            - object where the error occurred</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>code</term>
              <listitem>
                <simpara>uint
            - error code</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>message</term>
              <listitem>
                <simpara>string
            - error description</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The error event is sent out when a fatal (non-recoverable)
	error has occurred.  The object_id argument is the object
	where the error occurred, most often in response to a request
	to that object.  The code identifies the error and is defined
	by the object interface.  As such, each interface defines its
	own set of error codes.  The message is a brief description
	of the error, for (debugging) convenience.
      </para>
      </section>
      <section id="protocol-spec-wl_display-event-delete_id">
        <title>wl_display::delete_id
        - acknowledge object ID deletion</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>uint
            - deleted object ID</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event is used internally by the object ID management
	logic.  When a client deletes an object, the server will send
	this event to acknowledge that it has seen the delete request.
	When the client receives this event, it will know that it can
	safely reuse the object ID.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_display</title>
      <section id="protocol-spec-wl_display-enum-error">
        <title>wl_display::error
        - global error values</title>
        <para>
	These errors are global and can be emitted in response to any
	server request.
      </para>
        <variablelist>
          <varlistentry>
            <term>invalid_object</term>
            <listitem>
              <simpara>0
          - server couldn't find object</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_method</term>
            <listitem>
              <simpara>1
          - method doesn't exist on the specified interface</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>no_memory</term>
            <listitem>
              <simpara>2
          - server is out of memory</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_registry">
    <title>wl_registry
	- global registry object</title>
    <para>
      The singleton global registry object.  The server has a number of
      global objects that are available to all clients.  These objects
      typically represent an actual object in the server (for example,
      an input device) or they are singleton objects that provide
      extension functionality.</para>
    <para>      When a client creates a registry object, the registry object
      will emit a global event for each global currently in the
      registry.  Globals come and go as a result of device or
      monitor hotplugs, reconfiguration or other events, and the
      registry will send out global and global_remove events to
      keep the client up to date with the changes.  To mark the end
      of the initial burst of events, the client can use the
      wl_display.sync request immediately after calling
      wl_display.get_registry.</para>
    <para>      A client can bind to a global object by using the bind
      request.  This creates a client-side handle that lets the object
      emit events to the client and lets the client invoke requests on
      the object.
    </para>
    <section>
      <title>Requests provided by wl_registry</title>
      <section id="protocol-spec-wl_registry-request-bind">
        <title>wl_registry::bind
        - bind an object to the display</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>name</term>
              <listitem>
                <simpara>uint
            - unique numeric name of the object</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>new_id
            - bounded object</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Binds a new, client-created object to the server using the
	specified name as the identifier.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_registry</title>
      <section id="protocol-spec-wl_registry-event-global">
        <title>wl_registry::global
        - announce global object</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>name</term>
              <listitem>
                <simpara>uint
            - numeric name of the global object</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>interface</term>
              <listitem>
                <simpara>string
            - interface implemented by the object</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>version</term>
              <listitem>
                <simpara>uint
            - interface version</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notify the client of global objects.</para>
        <para>	The event notifies the client that a global object with
	the given name is now available, and it implements the
	given version of the given interface.
      </para>
      </section>
      <section id="protocol-spec-wl_registry-event-global_remove">
        <title>wl_registry::global_remove
        - announce removal of global object</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>name</term>
              <listitem>
                <simpara>uint
            - numeric name of the global object</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notify the client of removed global objects.</para>
        <para>	This event notifies the client that the global identified
	by name is no longer available.  If the client bound to
	the global using the bind request, the client should now
	destroy that object.</para>
        <para>	The object remains valid and requests to the object will be
	ignored until the client destroys it, to avoid races between
	the global going away and a client sending a request to it.
      </para>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_callback">
    <title>wl_callback
	- callback object</title>
    <para>
      Clients can handle the 'done' event to get notified when
      the related request is done.
    </para>
    <section>
      <title>Events provided by wl_callback</title>
      <section id="protocol-spec-wl_callback-event-done">
        <title>wl_callback::done
        - done event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>callback_data</term>
              <listitem>
                <simpara>uint
            - request-specific data for the callback</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notify the client when the related request is done.
      </para>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_compositor">
    <title>wl_compositor
	- the compositor singleton</title>
    <para>
      A compositor.  This object is a singleton global.  The
      compositor is in charge of combining the contents of multiple
      surfaces into one displayable output.
    </para>
    <section>
      <title>Requests provided by wl_compositor</title>
      <section id="protocol-spec-wl_compositor-request-create_surface">
        <title>wl_compositor::create_surface
        - create new surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_surface">wl_surface</link>
            - the new surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Ask the compositor to create a new surface.
      </para>
      </section>
      <section id="protocol-spec-wl_compositor-request-create_region">
        <title>wl_compositor::create_region
        - create new region</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_region">wl_region</link>
            - the new region</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Ask the compositor to create a new region.
      </para>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_shm_pool">
    <title>wl_shm_pool
	- a shared memory pool</title>
    <para>
      The wl_shm_pool object encapsulates a piece of memory shared
      between the compositor and client.  Through the wl_shm_pool
      object, the client can allocate shared memory wl_buffer objects.
      All objects created through the same pool share the same
      underlying mapped memory. Reusing the mapped memory avoids the
      setup/teardown overhead and is useful when interactively resizing
      a surface or for many small buffers.
    </para>
    <section>
      <title>Requests provided by wl_shm_pool</title>
      <section id="protocol-spec-wl_shm_pool-request-create_buffer">
        <title>wl_shm_pool::create_buffer
        - create a buffer from the pool</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_buffer">wl_buffer</link>
            - buffer to create</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>offset</term>
              <listitem>
                <simpara>int
            - buffer byte offset within the pool</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>width</term>
              <listitem>
                <simpara>int
            - buffer width, in pixels</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>height</term>
              <listitem>
                <simpara>int
            - buffer height, in pixels</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>stride</term>
              <listitem>
                <simpara>int
            - number of bytes from the beginning of one row to the beginning of the next row</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>format</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_shm-enum-format">wl_shm::format</link>
          (uint)
          
            - buffer pixel format</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Create a wl_buffer object from the pool.</para>
        <para>	The buffer is created offset bytes into the pool and has
	width and height as specified.  The stride argument specifies
	the number of bytes from the beginning of one row to the beginning
	of the next.  The format is the pixel format of the buffer and
	must be one of those advertised through the wl_shm.format event.</para>
        <para>	A buffer will keep a reference to the pool it was created from
	so it is valid to destroy the pool immediately after creating
	a buffer from it.
      </para>
      </section>
      <section id="protocol-spec-wl_shm_pool-request-destroy">
        <title>wl_shm_pool::destroy
        - destroy the pool</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Destroy the shared memory pool.</para>
        <para>	The mmapped memory will be released when all
	buffers that have been created from this pool
	are gone.
      </para>
      </section>
      <section id="protocol-spec-wl_shm_pool-request-resize">
        <title>wl_shm_pool::resize
        - change the size of the pool mapping</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>size</term>
              <listitem>
                <simpara>int
            - new size of the pool, in bytes</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request will cause the server to remap the backing memory
	for the pool from the file descriptor passed when the pool was
	created, but using the new size.  This request can only be
	used to make the pool bigger.
      </para>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_shm">
    <title>wl_shm
	- shared memory support</title>
    <para>
      A singleton global object that provides support for shared
      memory.</para>
    <para>      Clients can create wl_shm_pool objects using the create_pool
      request.</para>
    <para>      At connection setup time, the wl_shm object emits one or more
      format events to inform clients about the valid pixel formats
      that can be used for buffers.
    </para>
    <section>
      <title>Requests provided by wl_shm</title>
      <section id="protocol-spec-wl_shm-request-create_pool">
        <title>wl_shm::create_pool
        - create a shm pool</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_shm_pool">wl_shm_pool</link>
            - pool to create</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>fd</term>
              <listitem>
                <simpara>fd
            - file descriptor for the pool</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>size</term>
              <listitem>
                <simpara>int
            - pool size, in bytes</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Create a new wl_shm_pool object.</para>
        <para>	The pool can be used to create shared memory based buffer
	objects.  The server will mmap size bytes of the passed file
	descriptor, to use as backing memory for the pool.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_shm</title>
      <section id="protocol-spec-wl_shm-event-format">
        <title>wl_shm::format
        - pixel format description</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>format</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_shm-enum-format">wl_shm::format</link>
          (uint)
          
            - buffer pixel format</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Informs the client about a valid pixel format that
	can be used for buffers. Known formats include
	argb8888 and xrgb8888.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_shm</title>
      <section id="protocol-spec-wl_shm-enum-error">
        <title>wl_shm::error
        - wl_shm error values</title>
        <para>
	These errors can be emitted in response to wl_shm requests.
      </para>
        <variablelist>
          <varlistentry>
            <term>invalid_format</term>
            <listitem>
              <simpara>0
          - buffer format is not known</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_stride</term>
            <listitem>
              <simpara>1
          - invalid size or stride during pool or buffer creation</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_fd</term>
            <listitem>
              <simpara>2
          - mmapping the file descriptor failed</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_shm-enum-format">
        <title>wl_shm::format
        - pixel formats</title>
        <para>
	This describes the memory layout of an individual pixel.</para>
        <para>	All renderers should support argb8888 and xrgb8888 but any other
	formats are optional and may not be supported by the particular
	renderer in use.</para>
        <para>	The drm format codes match the macros defined in drm_fourcc.h.
	The formats actually supported by the compositor will be
	reported by the format event.
      </para>
        <variablelist>
          <varlistentry>
            <term>argb8888</term>
            <listitem>
              <simpara>0
          - 32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xrgb8888</term>
            <listitem>
              <simpara>1
          - 32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>c8</term>
            <listitem>
              <simpara>0x20203843
          - 8-bit color index format, [7:0] C</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgb332</term>
            <listitem>
              <simpara>0x38424752
          - 8-bit RGB format, [7:0] R:G:B 3:3:2</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgr233</term>
            <listitem>
              <simpara>0x38524742
          - 8-bit BGR format, [7:0] B:G:R 2:3:3</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xrgb4444</term>
            <listitem>
              <simpara>0x32315258
          - 16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xbgr4444</term>
            <listitem>
              <simpara>0x32314258
          - 16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgbx4444</term>
            <listitem>
              <simpara>0x32315852
          - 16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgrx4444</term>
            <listitem>
              <simpara>0x32315842
          - 16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>argb4444</term>
            <listitem>
              <simpara>0x32315241
          - 16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>abgr4444</term>
            <listitem>
              <simpara>0x32314241
          - 16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgba4444</term>
            <listitem>
              <simpara>0x32314152
          - 16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgra4444</term>
            <listitem>
              <simpara>0x32314142
          - 16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xrgb1555</term>
            <listitem>
              <simpara>0x35315258
          - 16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xbgr1555</term>
            <listitem>
              <simpara>0x35314258
          - 16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgbx5551</term>
            <listitem>
              <simpara>0x35315852
          - 16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgrx5551</term>
            <listitem>
              <simpara>0x35315842
          - 16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>argb1555</term>
            <listitem>
              <simpara>0x35315241
          - 16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>abgr1555</term>
            <listitem>
              <simpara>0x35314241
          - 16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgba5551</term>
            <listitem>
              <simpara>0x35314152
          - 16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgra5551</term>
            <listitem>
              <simpara>0x35314142
          - 16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgb565</term>
            <listitem>
              <simpara>0x36314752
          - 16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgr565</term>
            <listitem>
              <simpara>0x36314742
          - 16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgb888</term>
            <listitem>
              <simpara>0x34324752
          - 24-bit RGB format, [23:0] R:G:B little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgr888</term>
            <listitem>
              <simpara>0x34324742
          - 24-bit BGR format, [23:0] B:G:R little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xbgr8888</term>
            <listitem>
              <simpara>0x34324258
          - 32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgbx8888</term>
            <listitem>
              <simpara>0x34325852
          - 32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgrx8888</term>
            <listitem>
              <simpara>0x34325842
          - 32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>abgr8888</term>
            <listitem>
              <simpara>0x34324241
          - 32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgba8888</term>
            <listitem>
              <simpara>0x34324152
          - 32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgra8888</term>
            <listitem>
              <simpara>0x34324142
          - 32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xrgb2101010</term>
            <listitem>
              <simpara>0x30335258
          - 32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xbgr2101010</term>
            <listitem>
              <simpara>0x30334258
          - 32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgbx1010102</term>
            <listitem>
              <simpara>0x30335852
          - 32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgrx1010102</term>
            <listitem>
              <simpara>0x30335842
          - 32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>argb2101010</term>
            <listitem>
              <simpara>0x30335241
          - 32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>abgr2101010</term>
            <listitem>
              <simpara>0x30334241
          - 32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rgba1010102</term>
            <listitem>
              <simpara>0x30334152
          - 32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bgra1010102</term>
            <listitem>
              <simpara>0x30334142
          - 32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yuyv</term>
            <listitem>
              <simpara>0x56595559
          - packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yvyu</term>
            <listitem>
              <simpara>0x55595659
          - packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>uyvy</term>
            <listitem>
              <simpara>0x59565955
          - packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>vyuy</term>
            <listitem>
              <simpara>0x59555956
          - packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>ayuv</term>
            <listitem>
              <simpara>0x56555941
          - packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>nv12</term>
            <listitem>
              <simpara>0x3231564e
          - 2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>nv21</term>
            <listitem>
              <simpara>0x3132564e
          - 2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>nv16</term>
            <listitem>
              <simpara>0x3631564e
          - 2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>nv61</term>
            <listitem>
              <simpara>0x3136564e
          - 2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yuv410</term>
            <listitem>
              <simpara>0x39565559
          - 3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yvu410</term>
            <listitem>
              <simpara>0x39555659
          - 3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yuv411</term>
            <listitem>
              <simpara>0x31315559
          - 3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yvu411</term>
            <listitem>
              <simpara>0x31315659
          - 3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yuv420</term>
            <listitem>
              <simpara>0x32315559
          - 3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yvu420</term>
            <listitem>
              <simpara>0x32315659
          - 3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yuv422</term>
            <listitem>
              <simpara>0x36315559
          - 3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yvu422</term>
            <listitem>
              <simpara>0x36315659
          - 3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yuv444</term>
            <listitem>
              <simpara>0x34325559
          - 3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>yvu444</term>
            <listitem>
              <simpara>0x34325659
          - 3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_buffer">
    <title>wl_buffer
	- content for a wl_surface</title>
    <para>
      A buffer provides the content for a wl_surface. Buffers are
      created through factory interfaces such as wl_drm, wl_shm or
      similar. It has a width and a height and can be attached to a
      wl_surface, but the mechanism by which a client provides and
      updates the contents is defined by the buffer factory interface.
    </para>
    <section>
      <title>Requests provided by wl_buffer</title>
      <section id="protocol-spec-wl_buffer-request-destroy">
        <title>wl_buffer::destroy
        - destroy a buffer</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Destroy a buffer. If and how you need to release the backing
	storage is defined by the buffer factory interface.</para>
        <para>	For possible side-effects to a surface, see wl_surface.attach.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_buffer</title>
      <section id="protocol-spec-wl_buffer-event-release">
        <title>wl_buffer::release
        - compositor releases buffer</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Sent when this wl_buffer is no longer used by the compositor.
	The client is now free to reuse or destroy this buffer and its
	backing storage.</para>
        <para>	If a client receives a release event before the frame callback
	requested in the same wl_surface.commit that attaches this
	wl_buffer to a surface, then the client is immediately free to
	reuse the buffer and its backing storage, and does not need a
	second buffer for the next surface content update. Typically
	this is possible, when the compositor maintains a copy of the
	wl_surface contents, e.g. as a GL texture. This is an important
	optimization for GL(ES) compositors with wl_shm clients.
      </para>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_data_offer">
    <title>wl_data_offer
	- offer to transfer data</title>
    <para>
      A wl_data_offer represents a piece of data offered for transfer
      by another client (the source client).  It is used by the
      copy-and-paste and drag-and-drop mechanisms.  The offer
      describes the different mime types that the data can be
      converted to and provides the mechanism for transferring the
      data directly from the source client.
    </para>
    <section>
      <title>Requests provided by wl_data_offer</title>
      <section id="protocol-spec-wl_data_offer-request-accept">
        <title>wl_data_offer::accept
        - accept one of the offered mime types</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the accept request</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mime_type</term>
              <listitem>
                <simpara>string
            - mime type accepted by the client</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Indicate that the client can accept the given mime type, or
	NULL for not accepted.</para>
        <para>	For objects of version 2 or older, this request is used by the
	client to give feedback whether the client can receive the given
	mime type, or NULL if none is accepted; the feedback does not
	determine whether the drag-and-drop operation succeeds or not.</para>
        <para>	For objects of version 3 or newer, this request determines the
	final result of the drag-and-drop operation. If the end result
	is that no mime types were accepted, the drag-and-drop operation
	will be cancelled and the corresponding drag source will receive
	wl_data_source.cancelled. Clients may still use this event in
	conjunction with wl_data_source.action for feedback.
      </para>
      </section>
      <section id="protocol-spec-wl_data_offer-request-receive">
        <title>wl_data_offer::receive
        - request that the data is transferred</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>mime_type</term>
              <listitem>
                <simpara>string
            - mime type desired by receiver</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>fd</term>
              <listitem>
                <simpara>fd
            - file descriptor for data transfer</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	To transfer the offered data, the client issues this request
	and indicates the mime type it wants to receive.  The transfer
	happens through the passed file descriptor (typically created
	with the pipe system call).  The source client writes the data
	in the mime type representation requested and then closes the
	file descriptor.</para>
        <para>	The receiving client reads from the read end of the pipe until
	EOF and then closes its end, at which point the transfer is
	complete.</para>
        <para>	This request may happen multiple times for different mime types,
	both before and after wl_data_device.drop. Drag-and-drop destination
	clients may preemptively fetch data or examine it more closely to
	determine acceptance.
      </para>
      </section>
      <section id="protocol-spec-wl_data_offer-request-destroy">
        <title>wl_data_offer::destroy
        - destroy data offer</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Destroy the data offer.
      </para>
      </section>
      <section id="protocol-spec-wl_data_offer-request-finish">
        <title>wl_data_offer::finish
        - the offer will no longer be used</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Notifies the compositor that the drag destination successfully
	finished the drag-and-drop operation.</para>
        <para>	Upon receiving this request, the compositor will emit
	wl_data_source.dnd_finished on the drag source client.</para>
        <para>	It is a client error to perform other requests than
	wl_data_offer.destroy after this one. It is also an error to perform
	this request after a NULL mime type has been set in
	wl_data_offer.accept or no action was received through
	wl_data_offer.action.
      </para>
      </section>
      <section id="protocol-spec-wl_data_offer-request-set_actions">
        <title>wl_data_offer::set_actions
        - set the available/preferred drag-and-drop actions</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>dnd_actions</term>
              <listitem>
                <simpara>uint
            - actions supported by the destination client</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>preferred_action</term>
              <listitem>
                <simpara>uint
            - action preferred by the destination client</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Sets the actions that the destination side client supports for
	this operation. This request may trigger the emission of
	wl_data_source.action and wl_data_offer.action events if the compositor
	needs to change the selected action.</para>
        <para>	This request can be called multiple times throughout the
	drag-and-drop operation, typically in response to wl_data_device.enter
	or wl_data_device.motion events.</para>
        <para>	This request determines the final result of the drag-and-drop
	operation. If the end result is that no action is accepted,
	the drag source will receive wl_drag_source.cancelled.</para>
        <para>	The dnd_actions argument must contain only values expressed in the
	wl_data_device_manager.dnd_actions enum, and the preferred_action
	argument must only contain one of those values set, otherwise it
	will result in a protocol error.</para>
        <para>	While managing an "ask" action, the destination drag-and-drop client
	may perform further wl_data_offer.receive requests, and is expected
	to perform one last wl_data_offer.set_actions request with a preferred
	action other than "ask" (and optionally wl_data_offer.accept) before
	requesting wl_data_offer.finish, in order to convey the action selected
	by the user. If the preferred action is not in the
	wl_data_offer.source_actions mask, an error will be raised.</para>
        <para>	If the "ask" action is dismissed (e.g. user cancellation), the client
	is expected to perform wl_data_offer.destroy right away.</para>
        <para>	This request can only be made on drag-and-drop offers, a protocol error
	will be raised otherwise.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_data_offer</title>
      <section id="protocol-spec-wl_data_offer-event-offer">
        <title>wl_data_offer::offer
        - advertise offered mime type</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>mime_type</term>
              <listitem>
                <simpara>string
            - offered mime type</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Sent immediately after creating the wl_data_offer object.  One
	event per offered mime type.
      </para>
      </section>
      <section id="protocol-spec-wl_data_offer-event-source_actions">
        <title>wl_data_offer::source_actions
        - notify the source-side available actions</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>source_actions</term>
              <listitem>
                <simpara>uint
            - actions offered by the data source</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event indicates the actions offered by the data source. It
	will be sent right after wl_data_device.enter, or anytime the source
	side changes its offered actions through wl_data_source.set_actions.
      </para>
      </section>
      <section id="protocol-spec-wl_data_offer-event-action">
        <title>wl_data_offer::action
        - notify the selected action</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>dnd_action</term>
              <listitem>
                <simpara>uint
            - action selected by the compositor</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event indicates the action selected by the compositor after
	matching the source/destination side actions. Only one action (or
	none) will be offered here.</para>
        <para>	This event can be emitted multiple times during the drag-and-drop
	operation in response to destination side action changes through
	wl_data_offer.set_actions.</para>
        <para>	This event will no longer be emitted after wl_data_device.drop
	happened on the drag-and-drop destination, the client must
	honor the last action received, or the last preferred one set
	through wl_data_offer.set_actions when handling an "ask" action.</para>
        <para>	Compositors may also change the selected action on the fly, mainly
	in response to keyboard modifier changes during the drag-and-drop
	operation.</para>
        <para>	The most recent action received is always the valid one. Prior to
	receiving wl_data_device.drop, the chosen action may change (e.g.
	due to keyboard modifiers being pressed). At the time of receiving
	wl_data_device.drop the drag-and-drop destination must honor the
	last action received.</para>
        <para>	Action changes may still happen after wl_data_device.drop,
	especially on "ask" actions, where the drag-and-drop destination
	may choose another action afterwards. Action changes happening
	at this stage are always the result of inter-client negotiation, the
	compositor shall no longer be able to induce a different action.</para>
        <para>	Upon "ask" actions, it is expected that the drag-and-drop destination
	may potentially choose a different action and/or mime type,
	based on wl_data_offer.source_actions and finally chosen by the
	user (e.g. popping up a menu with the available options). The
	final wl_data_offer.set_actions and wl_data_offer.accept requests
	must happen before the call to wl_data_offer.finish.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_data_offer</title>
      <section id="protocol-spec-wl_data_offer-enum-error">
        <title>wl_data_offer::error</title>
        <para/>
        <variablelist>
          <varlistentry>
            <term>invalid_finish</term>
            <listitem>
              <simpara>0
          - finish request was called untimely</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_action_mask</term>
            <listitem>
              <simpara>1
          - action mask contains invalid values</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_action</term>
            <listitem>
              <simpara>2
          - action argument has an invalid value</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_offer</term>
            <listitem>
              <simpara>3
          - offer doesn't accept this request</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_data_source">
    <title>wl_data_source
	- offer to transfer data</title>
    <para>
      The wl_data_source object is the source side of a wl_data_offer.
      It is created by the source client in a data transfer and
      provides a way to describe the offered data and a way to respond
      to requests to transfer the data.
    </para>
    <section>
      <title>Requests provided by wl_data_source</title>
      <section id="protocol-spec-wl_data_source-request-offer">
        <title>wl_data_source::offer
        - add an offered mime type</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>mime_type</term>
              <listitem>
                <simpara>string
            - mime type offered by the data source</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request adds a mime type to the set of mime types
	advertised to targets.  Can be called several times to offer
	multiple types.
      </para>
      </section>
      <section id="protocol-spec-wl_data_source-request-destroy">
        <title>wl_data_source::destroy
        - destroy the data source</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Destroy the data source.
      </para>
      </section>
      <section id="protocol-spec-wl_data_source-request-set_actions">
        <title>wl_data_source::set_actions
        - set the available drag-and-drop actions</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>dnd_actions</term>
              <listitem>
                <simpara>uint
            - actions supported by the data source</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Sets the actions that the source side client supports for this
	operation. This request may trigger wl_data_source.action and
	wl_data_offer.action events if the compositor needs to change the
	selected action.</para>
        <para>	The dnd_actions argument must contain only values expressed in the
	wl_data_device_manager.dnd_actions enum, otherwise it will result
	in a protocol error.</para>
        <para>	This request must be made once only, and can only be made on sources
	used in drag-and-drop, so it must be performed before
	wl_data_device.start_drag. Attempting to use the source other than
	for drag-and-drop will raise a protocol error.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_data_source</title>
      <section id="protocol-spec-wl_data_source-event-target">
        <title>wl_data_source::target
        - a target accepts an offered mime type</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>mime_type</term>
              <listitem>
                <simpara>string
            - mime type accepted by the target</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Sent when a target accepts pointer_focus or motion events.  If
	a target does not accept any of the offered types, type is NULL.</para>
        <para>	Used for feedback during drag-and-drop.
      </para>
      </section>
      <section id="protocol-spec-wl_data_source-event-send">
        <title>wl_data_source::send
        - send the data</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>mime_type</term>
              <listitem>
                <simpara>string
            - mime type for the data</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>fd</term>
              <listitem>
                <simpara>fd
            - file descriptor for the data</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Request for data from the client.  Send the data as the
	specified mime type over the passed file descriptor, then
	close it.
      </para>
      </section>
      <section id="protocol-spec-wl_data_source-event-cancelled">
        <title>wl_data_source::cancelled
        - selection was cancelled</title>
        <para>
          <variablelist/>
        </para>
        <para>
	This data source is no longer valid. There are several reasons why
	this could happen:</para>
        <para>	- The data source has been replaced by another data source.
	- The drag-and-drop operation was performed, but the drop destination
	  did not accept any of the mime types offered through
	  wl_data_source.target.
	- The drag-and-drop operation was performed, but the drop destination
	  did not select any of the actions present in the mask offered through
	  wl_data_source.action.
	- The drag-and-drop operation was performed but didn't happen over a
	  surface.
	- The compositor cancelled the drag-and-drop operation (e.g. compositor
	  dependent timeouts to avoid stale drag-and-drop transfers).</para>
        <para>	The client should clean up and destroy this data source.</para>
        <para>	For objects of version 2 or older, wl_data_source.cancelled will
	only be emitted if the data source was replaced by another data
	source.
      </para>
      </section>
      <section id="protocol-spec-wl_data_source-event-dnd_drop_performed">
        <title>wl_data_source::dnd_drop_performed
        - the drag-and-drop operation physically finished</title>
        <para>
          <variablelist/>
        </para>
        <para>
	The user performed the drop action. This event does not indicate
	acceptance, wl_data_source.cancelled may still be emitted afterwards
	if the drop destination does not accept any mime type.</para>
        <para>	However, this event might however not be received if the compositor
	cancelled the drag-and-drop operation before this event could happen.</para>
        <para>	Note that the data_source may still be used in the future and should
	not be destroyed here.
      </para>
      </section>
      <section id="protocol-spec-wl_data_source-event-dnd_finished">
        <title>wl_data_source::dnd_finished
        - the drag-and-drop operation concluded</title>
        <para>
          <variablelist/>
        </para>
        <para>
	The drop destination finished interoperating with this data
	source, so the client is now free to destroy this data source and
	free all associated data.</para>
        <para>	If the action used to perform the operation was "move", the
	source can now delete the transferred data.
      </para>
      </section>
      <section id="protocol-spec-wl_data_source-event-action">
        <title>wl_data_source::action
        - notify the selected action</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>dnd_action</term>
              <listitem>
                <simpara>uint
            - action selected by the compositor</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event indicates the action selected by the compositor after
	matching the source/destination side actions. Only one action (or
	none) will be offered here.</para>
        <para>	This event can be emitted multiple times during the drag-and-drop
	operation, mainly in response to destination side changes through
	wl_data_offer.set_actions, and as the data device enters/leaves
	surfaces.</para>
        <para>	It is only possible to receive this event after
	wl_data_source.dnd_drop_performed if the drag-and-drop operation
	ended in an "ask" action, in which case the final wl_data_source.action
	event will happen immediately before wl_data_source.dnd_finished.</para>
        <para>	Compositors may also change the selected action on the fly, mainly
	in response to keyboard modifier changes during the drag-and-drop
	operation.</para>
        <para>	The most recent action received is always the valid one. The chosen
	action may change alongside negotiation (e.g. an "ask" action can turn
	into a "move" operation), so the effects of the final action must
	always be applied in wl_data_offer.dnd_finished.</para>
        <para>	Clients can trigger cursor surface changes from this point, so
	they reflect the current action.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_data_source</title>
      <section id="protocol-spec-wl_data_source-enum-error">
        <title>wl_data_source::error</title>
        <para/>
        <variablelist>
          <varlistentry>
            <term>invalid_action_mask</term>
            <listitem>
              <simpara>0
          - action mask contains invalid values</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_source</term>
            <listitem>
              <simpara>1
          - source doesn't accept this request</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_data_device">
    <title>wl_data_device
	- data transfer device</title>
    <para>
      There is one wl_data_device per seat which can be obtained
      from the global wl_data_device_manager singleton.</para>
    <para>      A wl_data_device provides access to inter-client data transfer
      mechanisms such as copy-and-paste and drag-and-drop.
    </para>
    <section>
      <title>Requests provided by wl_data_device</title>
      <section id="protocol-spec-wl_data_device-request-start_drag">
        <title>wl_data_device::start_drag
        - start drag-and-drop operation</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>source</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_data_source">wl_data_source</link>
            - data source for the eventual transfer</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>origin</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - surface where the drag originates</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>icon</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - drag-and-drop icon surface</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the implicit grab on the origin</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request asks the compositor to start a drag-and-drop
	operation on behalf of the client.</para>
        <para>	The source argument is the data source that provides the data
	for the eventual data transfer. If source is NULL, enter, leave
	and motion events are sent only to the client that initiated the
	drag and the client is expected to handle the data passing
	internally.</para>
        <para>	The origin surface is the surface where the drag originates and
	the client must have an active implicit grab that matches the
	serial.</para>
        <para>	The icon surface is an optional (can be NULL) surface that
	provides an icon to be moved around with the cursor.  Initially,
	the top-left corner of the icon surface is placed at the cursor
	hotspot, but subsequent wl_surface.attach request can move the
	relative position. Attach requests must be confirmed with
	wl_surface.commit as usual. The icon surface is given the role of
	a drag-and-drop icon. If the icon surface already has another role,
	it raises a protocol error.</para>
        <para>	The current and pending input regions of the icon wl_surface are
	cleared, and wl_surface.set_input_region is ignored until the
	wl_surface is no longer used as the icon surface. When the use
	as an icon ends, the current and pending input regions become
	undefined, and the wl_surface is unmapped.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device-request-set_selection">
        <title>wl_data_device::set_selection
        - copy data to the selection</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>source</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_data_source">wl_data_source</link>
            - data source for the selection</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the event that triggered this request</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request asks the compositor to set the selection
	to the data from the source on behalf of the client.</para>
        <para>	To unset the selection, set the source to NULL.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device-request-release">
        <title>wl_data_device::release
        - destroy data device</title>
        <para>
          <variablelist/>
        </para>
        <para>
	This request destroys the data device.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_data_device</title>
      <section id="protocol-spec-wl_data_device-event-data_offer">
        <title>wl_data_device::data_offer
        - introduce a new wl_data_offer</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_data_offer">wl_data_offer</link>
            - the new data_offer object</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The data_offer event introduces a new wl_data_offer object,
	which will subsequently be used in either the
	data_device.enter event (for drag-and-drop) or the
	data_device.selection event (for selections).  Immediately
	following the data_device_data_offer event, the new data_offer
	object will send out data_offer.offer events to describe the
	mime types it offers.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device-event-enter">
        <title>wl_data_device::enter
        - initiate drag-and-drop session</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the enter event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - client surface entered</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>fixed
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>fixed
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_data_offer">wl_data_offer</link>
            - source data_offer object</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event is sent when an active drag-and-drop pointer enters
	a surface owned by the client.  The position of the pointer at
	enter time is provided by the x and y arguments, in surface-local
	coordinates.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device-event-leave">
        <title>wl_data_device::leave
        - end drag-and-drop session</title>
        <para>
          <variablelist/>
        </para>
        <para>
	This event is sent when the drag-and-drop pointer leaves the
	surface and the session ends.  The client must destroy the
	wl_data_offer introduced at enter time at this point.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device-event-motion">
        <title>wl_data_device::motion
        - drag-and-drop session motion</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>fixed
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>fixed
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event is sent when the drag-and-drop pointer moves within
	the currently focused surface. The new position of the pointer
	is provided by the x and y arguments, in surface-local
	coordinates.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device-event-drop">
        <title>wl_data_device::drop
        - end drag-and-drop session successfully</title>
        <para>
          <variablelist/>
        </para>
        <para>
	The event is sent when a drag-and-drop operation is ended
	because the implicit grab is removed.</para>
        <para>	The drag-and-drop destination is expected to honor the last action
	received through wl_data_offer.action, if the resulting action is
	"copy" or "move", the destination can still perform
	wl_data_offer.receive requests, and is expected to end all
	transfers with a wl_data_offer.finish request.</para>
        <para>	If the resulting action is "ask", the action will not be considered
	final. The drag-and-drop destination is expected to perform one last
	wl_data_offer.set_actions request, or wl_data_offer.destroy in order
	to cancel the operation.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device-event-selection">
        <title>wl_data_device::selection
        - advertise new selection</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_data_offer">wl_data_offer</link>
            - selection data_offer object</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The selection event is sent out to notify the client of a new
	wl_data_offer for the selection for this device.  The
	data_device.data_offer and the data_offer.offer events are
	sent out immediately before this event to introduce the data
	offer object.  The selection event is sent to a client
	immediately before receiving keyboard focus and when a new
	selection is set while the client has keyboard focus.  The
	data_offer is valid until a new data_offer or NULL is received
	or until the client loses keyboard focus.  The client must
	destroy the previous selection data_offer, if any, upon receiving
	this event.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_data_device</title>
      <section id="protocol-spec-wl_data_device-enum-error">
        <title>wl_data_device::error</title>
        <para/>
        <variablelist>
          <varlistentry>
            <term>role</term>
            <listitem>
              <simpara>0
          - given wl_surface has another role</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_data_device_manager">
    <title>wl_data_device_manager
	- data transfer interface</title>
    <para>
      The wl_data_device_manager is a singleton global object that
      provides access to inter-client data transfer mechanisms such as
      copy-and-paste and drag-and-drop.  These mechanisms are tied to
      a wl_seat and this interface lets a client get a wl_data_device
      corresponding to a wl_seat.</para>
    <para>      Depending on the version bound, the objects created from the bound
      wl_data_device_manager object will have different requirements for
      functioning properly. See wl_data_source.set_actions,
      wl_data_offer.accept and wl_data_offer.finish for details.
    </para>
    <section>
      <title>Requests provided by wl_data_device_manager</title>
      <section id="protocol-spec-wl_data_device_manager-request-create_data_source">
        <title>wl_data_device_manager::create_data_source
        - create a new data source</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_data_source">wl_data_source</link>
            - data source to create</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Create a new data source.
      </para>
      </section>
      <section id="protocol-spec-wl_data_device_manager-request-get_data_device">
        <title>wl_data_device_manager::get_data_device
        - create a new data device</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_data_device">wl_data_device</link>
            - data device to create</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>seat</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_seat">wl_seat</link>
            - seat associated with the data device</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Create a new data device for a given seat.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_data_device_manager</title>
      <section id="protocol-spec-wl_data_device_manager-enum-dnd_action">
        <title>wl_data_device_manager::dnd_action
        - bitfield
      
        - drag and drop actions</title>
        <para>
	This is a bitmask of the available/preferred actions in a
	drag-and-drop operation.</para>
        <para>	In the compositor, the selected action is a result of matching the
	actions offered by the source and destination sides.  "action" events
	with a "none" action will be sent to both source and destination if
	there is no match. All further checks will effectively happen on
	(source actions ∩ destination actions).</para>
        <para>	In addition, compositors may also pick different actions in
	reaction to key modifiers being pressed. One common design that
	is used in major toolkits (and the behavior recommended for
	compositors) is:</para>
        <para>	- If no modifiers are pressed, the first match (in bit order)
	  will be used.
	- Pressing Shift selects "move", if enabled in the mask.
	- Pressing Control selects "copy", if enabled in the mask.</para>
        <para>	Behavior beyond that is considered implementation-dependent.
	Compositors may for example bind other modifiers (like Alt/Meta)
	or drags initiated with other buttons than BTN_LEFT to specific
	actions (e.g. "ask").
      </para>
        <variablelist>
          <varlistentry>
            <term>none</term>
            <listitem>
              <simpara>0
          - no action</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>copy</term>
            <listitem>
              <simpara>1
          - copy action</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>move</term>
            <listitem>
              <simpara>2
          - move action</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>ask</term>
            <listitem>
              <simpara>4
          - ask action</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_shell">
    <title>wl_shell
	- create desktop-style surfaces</title>
    <para>
      This interface is implemented by servers that provide
      desktop-style user interfaces.</para>
    <para>      It allows clients to associate a wl_shell_surface with
      a basic surface.</para>
    <para>      Note! This protocol is deprecated and not intended for production use.
      For desktop-style user interfaces, use xdg_shell.
    </para>
    <section>
      <title>Requests provided by wl_shell</title>
      <section id="protocol-spec-wl_shell-request-get_shell_surface">
        <title>wl_shell::get_shell_surface
        - create a shell surface from a surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_shell_surface">wl_shell_surface</link>
            - shell surface to create</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - surface to be given the shell surface role</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Create a shell surface for an existing surface. This gives
	the wl_surface the role of a shell surface. If the wl_surface
	already has another role, it raises a protocol error.</para>
        <para>	Only one shell surface can be associated with a given surface.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_shell</title>
      <section id="protocol-spec-wl_shell-enum-error">
        <title>wl_shell::error</title>
        <para/>
        <variablelist>
          <varlistentry>
            <term>role</term>
            <listitem>
              <simpara>0
          - given wl_surface has another role</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_shell_surface">
    <title>wl_shell_surface
	- desktop-style metadata interface</title>
    <para>
      An interface that may be implemented by a wl_surface, for
      implementations that provide a desktop-style user interface.</para>
    <para>      It provides requests to treat surfaces like toplevel, fullscreen
      or popup windows, move, resize or maximize them, associate
      metadata like title and class, etc.</para>
    <para>      On the server side the object is automatically destroyed when
      the related wl_surface is destroyed. On the client side,
      wl_shell_surface_destroy() must be called before destroying
      the wl_surface object.
    </para>
    <section>
      <title>Requests provided by wl_shell_surface</title>
      <section id="protocol-spec-wl_shell_surface-request-pong">
        <title>wl_shell_surface::pong
        - respond to a ping event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the ping event</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	A client must respond to a ping event with a pong request or
	the client may be deemed unresponsive.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-move">
        <title>wl_shell_surface::move
        - start an interactive move</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>seat</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_seat">wl_seat</link>
            - seat whose pointer is used</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the implicit grab on the pointer</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Start a pointer-driven move of the surface.</para>
        <para>	This request must be used in response to a button press event.
	The server may ignore move requests depending on the state of
	the surface (e.g. fullscreen or maximized).
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-resize">
        <title>wl_shell_surface::resize
        - start an interactive resize</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>seat</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_seat">wl_seat</link>
            - seat whose pointer is used</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the implicit grab on the pointer</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>edges</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_shell_surface-enum-resize">wl_shell_surface::resize</link>
          (uint)
          
            - which edge or corner is being dragged</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Start a pointer-driven resizing of the surface.</para>
        <para>	This request must be used in response to a button press event.
	The server may ignore resize requests depending on the state of
	the surface (e.g. fullscreen or maximized).
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-set_toplevel">
        <title>wl_shell_surface::set_toplevel
        - make the surface a toplevel surface</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Map the surface as a toplevel surface.</para>
        <para>	A toplevel surface is not fullscreen, maximized or transient.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-set_transient">
        <title>wl_shell_surface::set_transient
        - make the surface a transient surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>parent</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - parent surface</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>flags</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_shell_surface-enum-transient">wl_shell_surface::transient</link>
          (uint)
          
            - transient surface behavior</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Map the surface relative to an existing surface.</para>
        <para>	The x and y arguments specify the location of the upper left
	corner of the surface relative to the upper left corner of the
	parent surface, in surface-local coordinates.</para>
        <para>	The flags argument controls details of the transient behaviour.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-set_fullscreen">
        <title>wl_shell_surface::set_fullscreen
        - make the surface a fullscreen surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>method</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_shell_surface-enum-fullscreen_method">wl_shell_surface::fullscreen_method</link>
          (uint)
          
            - method for resolving size conflict</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>framerate</term>
              <listitem>
                <simpara>uint
            - framerate in mHz</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>output</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output">wl_output</link>
            - output on which the surface is to be fullscreen</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Map the surface as a fullscreen surface.</para>
        <para>	If an output parameter is given then the surface will be made
	fullscreen on that output. If the client does not specify the
	output then the compositor will apply its policy - usually
	choosing the output on which the surface has the biggest surface
	area.</para>
        <para>	The client may specify a method to resolve a size conflict
	between the output size and the surface size - this is provided
	through the method parameter.</para>
        <para>	The framerate parameter is used only when the method is set
	to "driver", to indicate the preferred framerate. A value of 0
	indicates that the client does not care about framerate.  The
	framerate is specified in mHz, that is framerate of 60000 is 60Hz.</para>
        <para>	A method of "scale" or "driver" implies a scaling operation of
	the surface, either via a direct scaling operation or a change of
	the output mode. This will override any kind of output scaling, so
	that mapping a surface with a buffer size equal to the mode can
	fill the screen independent of buffer_scale.</para>
        <para>	A method of "fill" means we don't scale up the buffer, however
	any output scale is applied. This means that you may run into
	an edge case where the application maps a buffer with the same
	size of the output mode but buffer_scale 1 (thus making a
	surface larger than the output). In this case it is allowed to
	downscale the results to fit the screen.</para>
        <para>	The compositor must reply to this request with a configure event
	with the dimensions for the output on which the surface will
	be made fullscreen.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-set_popup">
        <title>wl_shell_surface::set_popup
        - make the surface a popup surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>seat</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_seat">wl_seat</link>
            - seat whose pointer is used</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the implicit grab on the pointer</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>parent</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - parent surface</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>flags</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_shell_surface-enum-transient">wl_shell_surface::transient</link>
          (uint)
          
            - transient surface behavior</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Map the surface as a popup.</para>
        <para>	A popup surface is a transient surface with an added pointer
	grab.</para>
        <para>	An existing implicit grab will be changed to owner-events mode,
	and the popup grab will continue after the implicit grab ends
	(i.e. releasing the mouse button does not cause the popup to
	be unmapped).</para>
        <para>	The popup grab continues until the window is destroyed or a
	mouse button is pressed in any other client's window. A click
	in any of the client's surfaces is reported as normal, however,
	clicks in other clients' surfaces will be discarded and trigger
	the callback.</para>
        <para>	The x and y arguments specify the location of the upper left
	corner of the surface relative to the upper left corner of the
	parent surface, in surface-local coordinates.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-set_maximized">
        <title>wl_shell_surface::set_maximized
        - make the surface a maximized surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>output</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output">wl_output</link>
            - output on which the surface is to be maximized</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Map the surface as a maximized surface.</para>
        <para>	If an output parameter is given then the surface will be
	maximized on that output. If the client does not specify the
	output then the compositor will apply its policy - usually
	choosing the output on which the surface has the biggest surface
	area.</para>
        <para>	The compositor will reply with a configure event telling
	the expected new surface size. The operation is completed
	on the next buffer attach to this surface.</para>
        <para>	A maximized surface typically fills the entire output it is
	bound to, except for desktop elements such as panels. This is
	the main difference between a maximized shell surface and a
	fullscreen shell surface.</para>
        <para>	The details depend on the compositor implementation.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-set_title">
        <title>wl_shell_surface::set_title
        - set surface title</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>title</term>
              <listitem>
                <simpara>string
            - surface title</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Set a short title for the surface.</para>
        <para>	This string may be used to identify the surface in a task bar,
	window list, or other user interface elements provided by the
	compositor.</para>
        <para>	The string must be encoded in UTF-8.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-request-set_class">
        <title>wl_shell_surface::set_class
        - set surface class</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>class_</term>
              <listitem>
                <simpara>string
            - surface class</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Set a class for the surface.</para>
        <para>	The surface class identifies the general class of applications
	to which the surface belongs. A common convention is to use the
	file name (or the full path if it is a non-standard location) of
	the application's .desktop file as the class.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_shell_surface</title>
      <section id="protocol-spec-wl_shell_surface-event-ping">
        <title>wl_shell_surface::ping
        - ping client</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the ping</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Ping a client to check if it is receiving events and sending
	requests. A client is expected to reply with a pong request.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-event-configure">
        <title>wl_shell_surface::configure
        - suggest resize</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>edges</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_shell_surface-enum-resize">wl_shell_surface::resize</link>
          (uint)
          
            - how the surface was resized</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>width</term>
              <listitem>
                <simpara>int
            - new width of the surface</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>height</term>
              <listitem>
                <simpara>int
            - new height of the surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The configure event asks the client to resize its surface.</para>
        <para>	The size is a hint, in the sense that the client is free to
	ignore it if it doesn't resize, pick a smaller size (to
	satisfy aspect ratio or resize in steps of NxM pixels).</para>
        <para>	The edges parameter provides a hint about how the surface
	was resized. The client may use this information to decide
	how to adjust its content to the new size (e.g. a scrolling
	area might adjust its content position to leave the viewable
	content unmoved).</para>
        <para>	The client is free to dismiss all but the last configure
	event it received.</para>
        <para>	The width and height arguments specify the size of the window
	in surface-local coordinates.
      </para>
      </section>
      <section id="protocol-spec-wl_shell_surface-event-popup_done">
        <title>wl_shell_surface::popup_done
        - popup interaction is done</title>
        <para>
          <variablelist/>
        </para>
        <para>
	The popup_done event is sent out when a popup grab is broken,
	that is, when the user clicks a surface that doesn't belong
	to the client owning the popup surface.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_shell_surface</title>
      <section id="protocol-spec-wl_shell_surface-enum-resize">
        <title>wl_shell_surface::resize
        - bitfield
      
        - edge values for resizing</title>
        <para>
	These values are used to indicate which edge of a surface
	is being dragged in a resize operation. The server may
	use this information to adapt its behavior, e.g. choose
	an appropriate cursor image.
      </para>
        <variablelist>
          <varlistentry>
            <term>none</term>
            <listitem>
              <simpara>0
          - no edge</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>top</term>
            <listitem>
              <simpara>1
          - top edge</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bottom</term>
            <listitem>
              <simpara>2
          - bottom edge</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>left</term>
            <listitem>
              <simpara>4
          - left edge</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>top_left</term>
            <listitem>
              <simpara>5
          - top and left edges</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bottom_left</term>
            <listitem>
              <simpara>6
          - bottom and left edges</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>right</term>
            <listitem>
              <simpara>8
          - right edge</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>top_right</term>
            <listitem>
              <simpara>9
          - top and right edges</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>bottom_right</term>
            <listitem>
              <simpara>10
          - bottom and right edges</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_shell_surface-enum-transient">
        <title>wl_shell_surface::transient
        - bitfield
      
        - details of transient behaviour</title>
        <para>
	These flags specify details of the expected behaviour
	of transient surfaces. Used in the set_transient request.
      </para>
        <variablelist>
          <varlistentry>
            <term>inactive</term>
            <listitem>
              <simpara>0x1
          - do not set keyboard focus</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_shell_surface-enum-fullscreen_method">
        <title>wl_shell_surface::fullscreen_method
        - different method to set the surface fullscreen</title>
        <para>
	Hints to indicate to the compositor how to deal with a conflict
	between the dimensions of the surface and the dimensions of the
	output. The compositor is free to ignore this parameter.
      </para>
        <variablelist>
          <varlistentry>
            <term>default</term>
            <listitem>
              <simpara>0
          - no preference, apply default policy</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>scale</term>
            <listitem>
              <simpara>1
          - scale, preserve the surface's aspect ratio and center on output</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>driver</term>
            <listitem>
              <simpara>2
          - switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>fill</term>
            <listitem>
              <simpara>3
          - no upscaling, center on output and add black borders to compensate size mismatch</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_surface">
    <title>wl_surface
	- an onscreen surface</title>
    <para>
      A surface is a rectangular area that is displayed on the screen.
      It has a location, size and pixel contents.</para>
    <para>      The size of a surface (and relative positions on it) is described
      in surface-local coordinates, which may differ from the buffer
      coordinates of the pixel content, in case a buffer_transform
      or a buffer_scale is used.</para>
    <para>      A surface without a "role" is fairly useless: a compositor does
      not know where, when or how to present it. The role is the
      purpose of a wl_surface. Examples of roles are a cursor for a
      pointer (as set by wl_pointer.set_cursor), a drag icon
      (wl_data_device.start_drag), a sub-surface
      (wl_subcompositor.get_subsurface), and a window as defined by a
      shell protocol (e.g. wl_shell.get_shell_surface).</para>
    <para>      A surface can have only one role at a time. Initially a
      wl_surface does not have a role. Once a wl_surface is given a
      role, it is set permanently for the whole lifetime of the
      wl_surface object. Giving the current role again is allowed,
      unless explicitly forbidden by the relevant interface
      specification.</para>
    <para>      Surface roles are given by requests in other interfaces such as
      wl_pointer.set_cursor. The request should explicitly mention
      that this request gives a role to a wl_surface. Often, this
      request also creates a new protocol object that represents the
      role and adds additional functionality to wl_surface. When a
      client wants to destroy a wl_surface, they must destroy this 'role
      object' before the wl_surface.</para>
    <para>      Destroying the role object does not remove the role from the
      wl_surface, but it may stop the wl_surface from "playing the role".
      For instance, if a wl_subsurface object is destroyed, the wl_surface
      it was created for will be unmapped and forget its position and
      z-order. It is allowed to create a wl_subsurface for the same
      wl_surface again, but it is not allowed to use the wl_surface as
      a cursor (cursor is a different role than sub-surface, and role
      switching is not allowed).
    </para>
    <section>
      <title>Requests provided by wl_surface</title>
      <section id="protocol-spec-wl_surface-request-destroy">
        <title>wl_surface::destroy
        - delete surface</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Deletes the surface and invalidates its object ID.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-attach">
        <title>wl_surface::attach
        - set the surface contents</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>buffer</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_buffer">wl_buffer</link>
            - buffer of surface contents</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Set a buffer as the content of this surface.</para>
        <para>	The new size of the surface is calculated based on the buffer
	size transformed by the inverse buffer_transform and the
	inverse buffer_scale. This means that the supplied buffer
	must be an integer multiple of the buffer_scale.</para>
        <para>	The x and y arguments specify the location of the new pending
	buffer's upper left corner, relative to the current buffer's upper
	left corner, in surface-local coordinates. In other words, the
	x and y, combined with the new surface size define in which
	directions the surface's size changes.</para>
        <para>	Surface contents are double-buffered state, see wl_surface.commit.</para>
        <para>	The initial surface contents are void; there is no content.
	wl_surface.attach assigns the given wl_buffer as the pending
	wl_buffer. wl_surface.commit makes the pending wl_buffer the new
	surface contents, and the size of the surface becomes the size
	calculated from the wl_buffer, as described above. After commit,
	there is no pending buffer until the next attach.</para>
        <para>	Committing a pending wl_buffer allows the compositor to read the
	pixels in the wl_buffer. The compositor may access the pixels at
	any time after the wl_surface.commit request. When the compositor
	will not access the pixels anymore, it will send the
	wl_buffer.release event. Only after receiving wl_buffer.release,
	the client may reuse the wl_buffer. A wl_buffer that has been
	attached and then replaced by another attach instead of committed
	will not receive a release event, and is not used by the
	compositor.</para>
        <para>	Destroying the wl_buffer after wl_buffer.release does not change
	the surface contents. However, if the client destroys the
	wl_buffer before receiving the wl_buffer.release event, the surface
	contents become undefined immediately.</para>
        <para>	If wl_surface.attach is sent with a NULL wl_buffer, the
	following wl_surface.commit will remove the surface content.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-damage">
        <title>wl_surface::damage
        - mark part of the surface damaged</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>width</term>
              <listitem>
                <simpara>int
            - width of damage rectangle</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>height</term>
              <listitem>
                <simpara>int
            - height of damage rectangle</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request is used to describe the regions where the pending
	buffer is different from the current surface contents, and where
	the surface therefore needs to be repainted. The compositor
	ignores the parts of the damage that fall outside of the surface.</para>
        <para>	Damage is double-buffered state, see wl_surface.commit.</para>
        <para>	The damage rectangle is specified in surface-local coordinates,
	where x and y specify the upper left corner of the damage rectangle.</para>
        <para>	The initial value for pending damage is empty: no damage.
	wl_surface.damage adds pending damage: the new pending damage
	is the union of old pending damage and the given rectangle.</para>
        <para>	wl_surface.commit assigns pending damage as the current damage,
	and clears pending damage. The server will clear the current
	damage as it repaints the surface.</para>
        <para>	Alternatively, damage can be posted with wl_surface.damage_buffer
	which uses buffer coordinates instead of surface coordinates,
	and is probably the preferred and intuitive way of doing this.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-frame">
        <title>wl_surface::frame
        - request a frame throttling hint</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>callback</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_callback">wl_callback</link>
            - callback object for the frame request</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Request a notification when it is a good time to start drawing a new
	frame, by creating a frame callback. This is useful for throttling
	redrawing operations, and driving animations.</para>
        <para>	When a client is animating on a wl_surface, it can use the 'frame'
	request to get notified when it is a good time to draw and commit the
	next frame of animation. If the client commits an update earlier than
	that, it is likely that some updates will not make it to the display,
	and the client is wasting resources by drawing too often.</para>
        <para>	The frame request will take effect on the next wl_surface.commit.
	The notification will only be posted for one frame unless
	requested again. For a wl_surface, the notifications are posted in
	the order the frame requests were committed.</para>
        <para>	The server must send the notifications so that a client
	will not send excessive updates, while still allowing
	the highest possible update rate for clients that wait for the reply
	before drawing again. The server should give some time for the client
	to draw and commit after sending the frame callback events to let it
	hit the next output refresh.</para>
        <para>	A server should avoid signaling the frame callbacks if the
	surface is not visible in any way, e.g. the surface is off-screen,
	or completely obscured by other opaque surfaces.</para>
        <para>	The object returned by this request will be destroyed by the
	compositor after the callback is fired and as such the client must not
	attempt to use it after that point.</para>
        <para>	The callback_data passed in the callback is the current time, in
	milliseconds, with an undefined base.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-set_opaque_region">
        <title>wl_surface::set_opaque_region
        - set opaque region</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>region</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_region">wl_region</link>
            - opaque region of the surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request sets the region of the surface that contains
	opaque content.</para>
        <para>	The opaque region is an optimization hint for the compositor
	that lets it optimize the redrawing of content behind opaque
	regions.  Setting an opaque region is not required for correct
	behaviour, but marking transparent content as opaque will result
	in repaint artifacts.</para>
        <para>	The opaque region is specified in surface-local coordinates.</para>
        <para>	The compositor ignores the parts of the opaque region that fall
	outside of the surface.</para>
        <para>	Opaque region is double-buffered state, see wl_surface.commit.</para>
        <para>	wl_surface.set_opaque_region changes the pending opaque region.
	wl_surface.commit copies the pending region to the current region.
	Otherwise, the pending and current regions are never changed.</para>
        <para>	The initial value for an opaque region is empty. Setting the pending
	opaque region has copy semantics, and the wl_region object can be
	destroyed immediately. A NULL wl_region causes the pending opaque
	region to be set to empty.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-set_input_region">
        <title>wl_surface::set_input_region
        - set input region</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>region</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_region">wl_region</link>
            - input region of the surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request sets the region of the surface that can receive
	pointer and touch events.</para>
        <para>	Input events happening outside of this region will try the next
	surface in the server surface stack. The compositor ignores the
	parts of the input region that fall outside of the surface.</para>
        <para>	The input region is specified in surface-local coordinates.</para>
        <para>	Input region is double-buffered state, see wl_surface.commit.</para>
        <para>	wl_surface.set_input_region changes the pending input region.
	wl_surface.commit copies the pending region to the current region.
	Otherwise the pending and current regions are never changed,
	except cursor and icon surfaces are special cases, see
	wl_pointer.set_cursor and wl_data_device.start_drag.</para>
        <para>	The initial value for an input region is infinite. That means the
	whole surface will accept input. Setting the pending input region
	has copy semantics, and the wl_region object can be destroyed
	immediately. A NULL wl_region causes the input region to be set
	to infinite.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-commit">
        <title>wl_surface::commit
        - commit pending surface state</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Surface state (input, opaque, and damage regions, attached buffers,
	etc.) is double-buffered. Protocol requests modify the pending state,
	as opposed to the current state in use by the compositor. A commit
	request atomically applies all pending state, replacing the current
	state. After commit, the new pending state is as documented for each
	related request.</para>
        <para>	On commit, a pending wl_buffer is applied first, and all other state
	second. This means that all coordinates in double-buffered state are
	relative to the new wl_buffer coming into use, except for
	wl_surface.attach itself. If there is no pending wl_buffer, the
	coordinates are relative to the current surface contents.</para>
        <para>	All requests that need a commit to become effective are documented
	to affect double-buffered state.</para>
        <para>	Other interfaces may add further double-buffered surface state.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-set_buffer_transform">
        <title>wl_surface::set_buffer_transform
        - sets the buffer transformation</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>transform</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output-enum-transform">wl_output::transform</link>
          (int)
          
            - transform for interpreting buffer contents</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request sets an optional transformation on how the compositor
	interprets the contents of the buffer attached to the surface. The
	accepted values for the transform parameter are the values for
	wl_output.transform.</para>
        <para>	Buffer transform is double-buffered state, see wl_surface.commit.</para>
        <para>	A newly created surface has its buffer transformation set to normal.</para>
        <para>	wl_surface.set_buffer_transform changes the pending buffer
	transformation. wl_surface.commit copies the pending buffer
	transformation to the current one. Otherwise, the pending and current
	values are never changed.</para>
        <para>	The purpose of this request is to allow clients to render content
	according to the output transform, thus permitting the compositor to
	use certain optimizations even if the display is rotated. Using
	hardware overlays and scanning out a client buffer for fullscreen
	surfaces are examples of such optimizations. Those optimizations are
	highly dependent on the compositor implementation, so the use of this
	request should be considered on a case-by-case basis.</para>
        <para>	Note that if the transform value includes 90 or 270 degree rotation,
	the width of the buffer will become the surface height and the height
	of the buffer will become the surface width.</para>
        <para>	If transform is not one of the values from the
	wl_output.transform enum the invalid_transform protocol error
	is raised.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-set_buffer_scale">
        <title>wl_surface::set_buffer_scale
        - sets the buffer scaling factor</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>scale</term>
              <listitem>
                <simpara>int
            - positive scale for interpreting buffer contents</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request sets an optional scaling factor on how the compositor
	interprets the contents of the buffer attached to the window.</para>
        <para>	Buffer scale is double-buffered state, see wl_surface.commit.</para>
        <para>	A newly created surface has its buffer scale set to 1.</para>
        <para>	wl_surface.set_buffer_scale changes the pending buffer scale.
	wl_surface.commit copies the pending buffer scale to the current one.
	Otherwise, the pending and current values are never changed.</para>
        <para>	The purpose of this request is to allow clients to supply higher
	resolution buffer data for use on high resolution outputs. It is
	intended that you pick the same buffer scale as the scale of the
	output that the surface is displayed on. This means the compositor
	can avoid scaling when rendering the surface on that output.</para>
        <para>	Note that if the scale is larger than 1, then you have to attach
	a buffer that is larger (by a factor of scale in each dimension)
	than the desired surface size.</para>
        <para>	If scale is not positive the invalid_scale protocol error is
	raised.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-request-damage_buffer">
        <title>wl_surface::damage_buffer
        - mark part of the surface damaged using buffer coordinates</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - buffer-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - buffer-local y coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>width</term>
              <listitem>
                <simpara>int
            - width of damage rectangle</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>height</term>
              <listitem>
                <simpara>int
            - height of damage rectangle</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This request is used to describe the regions where the pending
	buffer is different from the current surface contents, and where
	the surface therefore needs to be repainted. The compositor
	ignores the parts of the damage that fall outside of the surface.</para>
        <para>	Damage is double-buffered state, see wl_surface.commit.</para>
        <para>	The damage rectangle is specified in buffer coordinates,
	where x and y specify the upper left corner of the damage rectangle.</para>
        <para>	The initial value for pending damage is empty: no damage.
	wl_surface.damage_buffer adds pending damage: the new pending
	damage is the union of old pending damage and the given rectangle.</para>
        <para>	wl_surface.commit assigns pending damage as the current damage,
	and clears pending damage. The server will clear the current
	damage as it repaints the surface.</para>
        <para>	This request differs from wl_surface.damage in only one way - it
	takes damage in buffer coordinates instead of surface-local
	coordinates. While this generally is more intuitive than surface
	coordinates, it is especially desirable when using wp_viewport
	or when a drawing library (like EGL) is unaware of buffer scale
	and buffer transform.</para>
        <para>	Note: Because buffer transformation changes and damage requests may
	be interleaved in the protocol stream, it is impossible to determine
	the actual mapping between surface and buffer damage until
	wl_surface.commit time. Therefore, compositors wishing to take both
	kinds of damage into account will have to accumulate damage from the
	two requests separately and only transform from one to the other
	after receiving the wl_surface.commit.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_surface</title>
      <section id="protocol-spec-wl_surface-event-enter">
        <title>wl_surface::enter
        - surface enters an output</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>output</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output">wl_output</link>
            - output entered by the surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This is emitted whenever a surface's creation, movement, or resizing
	results in some part of it being within the scanout region of an
	output.</para>
        <para>	Note that a surface may be overlapping with zero or more outputs.
      </para>
      </section>
      <section id="protocol-spec-wl_surface-event-leave">
        <title>wl_surface::leave
        - surface leaves an output</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>output</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output">wl_output</link>
            - output left by the surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This is emitted whenever a surface's creation, movement, or resizing
	results in it no longer having any part of it within the scanout region
	of an output.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_surface</title>
      <section id="protocol-spec-wl_surface-enum-error">
        <title>wl_surface::error
        - wl_surface error values</title>
        <para>
	These errors can be emitted in response to wl_surface requests.
      </para>
        <variablelist>
          <varlistentry>
            <term>invalid_scale</term>
            <listitem>
              <simpara>0
          - buffer scale value is invalid</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>invalid_transform</term>
            <listitem>
              <simpara>1
          - buffer transform value is invalid</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_seat">
    <title>wl_seat
	- group of input devices</title>
    <para>
      A seat is a group of keyboards, pointer and touch devices. This
      object is published as a global during start up, or when such a
      device is hot plugged.  A seat typically has a pointer and
      maintains a keyboard focus and a pointer focus.
    </para>
    <section>
      <title>Requests provided by wl_seat</title>
      <section id="protocol-spec-wl_seat-request-get_pointer">
        <title>wl_seat::get_pointer
        - return pointer object</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_pointer">wl_pointer</link>
            - seat pointer</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The ID provided will be initialized to the wl_pointer interface
	for this seat.</para>
        <para>	This request only takes effect if the seat has the pointer
	capability, or has had the pointer capability in the past.
	It is a protocol violation to issue this request on a seat that has
	never had the pointer capability.
      </para>
      </section>
      <section id="protocol-spec-wl_seat-request-get_keyboard">
        <title>wl_seat::get_keyboard
        - return keyboard object</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_keyboard">wl_keyboard</link>
            - seat keyboard</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The ID provided will be initialized to the wl_keyboard interface
	for this seat.</para>
        <para>	This request only takes effect if the seat has the keyboard
	capability, or has had the keyboard capability in the past.
	It is a protocol violation to issue this request on a seat that has
	never had the keyboard capability.
      </para>
      </section>
      <section id="protocol-spec-wl_seat-request-get_touch">
        <title>wl_seat::get_touch
        - return touch object</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_touch">wl_touch</link>
            - seat touch interface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The ID provided will be initialized to the wl_touch interface
	for this seat.</para>
        <para>	This request only takes effect if the seat has the touch
	capability, or has had the touch capability in the past.
	It is a protocol violation to issue this request on a seat that has
	never had the touch capability.
      </para>
      </section>
      <section id="protocol-spec-wl_seat-request-release">
        <title>wl_seat::release
        - release the seat object</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Using this request a client can tell the server that it is not going to
	use the seat object anymore.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_seat</title>
      <section id="protocol-spec-wl_seat-event-capabilities">
        <title>wl_seat::capabilities
        - seat capabilities changed</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>capabilities</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_seat-enum-capability">wl_seat::capability</link>
          (uint)
          
            - capabilities of the seat</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This is emitted whenever a seat gains or loses the pointer,
	keyboard or touch capabilities.  The argument is a capability
	enum containing the complete set of capabilities this seat has.</para>
        <para>	When the pointer capability is added, a client may create a
	wl_pointer object using the wl_seat.get_pointer request. This object
	will receive pointer events until the capability is removed in the
	future.</para>
        <para>	When the pointer capability is removed, a client should destroy the
	wl_pointer objects associated with the seat where the capability was
	removed, using the wl_pointer.release request. No further pointer
	events will be received on these objects.</para>
        <para>	In some compositors, if a seat regains the pointer capability and a
	client has a previously obtained wl_pointer object of version 4 or
	less, that object may start sending pointer events again. This
	behavior is considered a misinterpretation of the intended behavior
	and must not be relied upon by the client. wl_pointer objects of
	version 5 or later must not send events if created before the most
	recent event notifying the client of an added pointer capability.</para>
        <para>	The above behavior also applies to wl_keyboard and wl_touch with the
	keyboard and touch capabilities, respectively.
      </para>
      </section>
      <section id="protocol-spec-wl_seat-event-name">
        <title>wl_seat::name
        - unique identifier for this seat</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>name</term>
              <listitem>
                <simpara>string
            - seat identifier</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	In a multiseat configuration this can be used by the client to help
	identify which physical devices the seat represents. Based on
	the seat configuration used by the compositor.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_seat</title>
      <section id="protocol-spec-wl_seat-enum-capability">
        <title>wl_seat::capability
        - bitfield
      
        - seat capability bitmask</title>
        <para>
	This is a bitmask of capabilities this seat has; if a member is
	set, then it is present on the seat.
      </para>
        <variablelist>
          <varlistentry>
            <term>pointer</term>
            <listitem>
              <simpara>1
          - the seat has pointer devices</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>keyboard</term>
            <listitem>
              <simpara>2
          - the seat has one or more keyboards</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>touch</term>
            <listitem>
              <simpara>4
          - the seat has touch devices</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_pointer">
    <title>wl_pointer
	- pointer input device</title>
    <para>
      The wl_pointer interface represents one or more input devices,
      such as mice, which control the pointer location and pointer_focus
      of a seat.</para>
    <para>      The wl_pointer interface generates motion, enter and leave
      events for the surfaces that the pointer is located over,
      and button and axis events for button presses, button releases
      and scrolling.
    </para>
    <section>
      <title>Requests provided by wl_pointer</title>
      <section id="protocol-spec-wl_pointer-request-set_cursor">
        <title>wl_pointer::set_cursor
        - set the pointer surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the enter event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - pointer surface</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>hotspot_x</term>
              <listitem>
                <simpara>int
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>hotspot_y</term>
              <listitem>
                <simpara>int
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Set the pointer surface, i.e., the surface that contains the
	pointer image (cursor). This request gives the surface the role
	of a cursor. If the surface already has another role, it raises
	a protocol error.</para>
        <para>	The cursor actually changes only if the pointer
	focus for this device is one of the requesting client's surfaces
	or the surface parameter is the current pointer surface. If
	there was a previous surface set with this request it is
	replaced. If surface is NULL, the pointer image is hidden.</para>
        <para>	The parameters hotspot_x and hotspot_y define the position of
	the pointer surface relative to the pointer location. Its
	top-left corner is always at (x, y) - (hotspot_x, hotspot_y),
	where (x, y) are the coordinates of the pointer location, in
	surface-local coordinates.</para>
        <para>	On surface.attach requests to the pointer surface, hotspot_x
	and hotspot_y are decremented by the x and y parameters
	passed to the request. Attach must be confirmed by
	wl_surface.commit as usual.</para>
        <para>	The hotspot can also be updated by passing the currently set
	pointer surface to this request with new values for hotspot_x
	and hotspot_y.</para>
        <para>	The current and pending input regions of the wl_surface are
	cleared, and wl_surface.set_input_region is ignored until the
	wl_surface is no longer used as the cursor. When the use as a
	cursor ends, the current and pending input regions become
	undefined, and the wl_surface is unmapped.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-request-release">
        <title>wl_pointer::release
        - release the pointer object</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Using this request a client can tell the server that it is not going to
	use the pointer object anymore.</para>
        <para>	This request destroys the pointer proxy object, so clients must not call
	wl_pointer_destroy() after using this request.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_pointer</title>
      <section id="protocol-spec-wl_pointer-event-enter">
        <title>wl_pointer::enter
        - enter event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the enter event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - surface entered by the pointer</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface_x</term>
              <listitem>
                <simpara>fixed
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface_y</term>
              <listitem>
                <simpara>fixed
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notification that this seat's pointer is focused on a certain
	surface.</para>
        <para>	When a seat's focus enters a surface, the pointer image
	is undefined and a client should respond to this event by setting
	an appropriate pointer image with the set_cursor request.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-leave">
        <title>wl_pointer::leave
        - leave event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the leave event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - surface left by the pointer</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notification that this seat's pointer is no longer focused on
	a certain surface.</para>
        <para>	The leave notification is sent before the enter notification
	for the new focus.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-motion">
        <title>wl_pointer::motion
        - pointer motion event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface_x</term>
              <listitem>
                <simpara>fixed
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface_y</term>
              <listitem>
                <simpara>fixed
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notification of pointer location change. The arguments
	surface_x and surface_y are the location relative to the
	focused surface.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-button">
        <title>wl_pointer::button
        - pointer button event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the button event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>button</term>
              <listitem>
                <simpara>uint
            - button that produced the event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>state</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_pointer-enum-button_state">wl_pointer::button_state</link>
          (uint)
          
            - physical state of the button</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Mouse button click and release notifications.</para>
        <para>	The location of the click is given by the last motion or
	enter event.
	The time argument is a timestamp with millisecond
	granularity, with an undefined base.</para>
        <para>	The button is a button code as defined in the Linux kernel's
	linux/input-event-codes.h header file, e.g. BTN_LEFT.</para>
        <para>	Any 16-bit button code value is reserved for future additions to the
	kernel's event code list. All other button codes above 0xFFFF are
	currently undefined but may be used in future versions of this
	protocol.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-axis">
        <title>wl_pointer::axis
        - axis event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>axis</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_pointer-enum-axis">wl_pointer::axis</link>
          (uint)
          
            - axis type</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>value</term>
              <listitem>
                <simpara>fixed
            - length of vector in surface-local coordinate space</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Scroll and other axis notifications.</para>
        <para>	For scroll events (vertical and horizontal scroll axes), the
	value parameter is the length of a vector along the specified
	axis in a coordinate space identical to those of motion events,
	representing a relative movement along the specified axis.</para>
        <para>	For devices that support movements non-parallel to axes multiple
	axis events will be emitted.</para>
        <para>	When applicable, for example for touch pads, the server can
	choose to emit scroll events where the motion vector is
	equivalent to a motion event vector.</para>
        <para>	When applicable, a client can transform its content relative to the
	scroll distance.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-frame">
        <title>wl_pointer::frame
        - end of a pointer event sequence</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Indicates the end of a set of events that logically belong together.
	A client is expected to accumulate the data in all events within the
	frame before proceeding.</para>
        <para>	All wl_pointer events before a wl_pointer.frame event belong
	logically together. For example, in a diagonal scroll motion the
	compositor will send an optional wl_pointer.axis_source event, two
	wl_pointer.axis events (horizontal and vertical) and finally a
	wl_pointer.frame event. The client may use this information to
	calculate a diagonal vector for scrolling.</para>
        <para>	When multiple wl_pointer.axis events occur within the same frame,
	the motion vector is the combined motion of all events.
	When a wl_pointer.axis and a wl_pointer.axis_stop event occur within
	the same frame, this indicates that axis movement in one axis has
	stopped but continues in the other axis.
	When multiple wl_pointer.axis_stop events occur within the same
	frame, this indicates that these axes stopped in the same instance.</para>
        <para>	A wl_pointer.frame event is sent for every logical event group,
	even if the group only contains a single wl_pointer event.
	Specifically, a client may get a sequence: motion, frame, button,
	frame, axis, frame, axis_stop, frame.</para>
        <para>	The wl_pointer.enter and wl_pointer.leave events are logical events
	generated by the compositor and not the hardware. These events are
	also grouped by a wl_pointer.frame. When a pointer moves from one
	surface to another, a compositor should group the
	wl_pointer.leave event within the same wl_pointer.frame.
	However, a client must not rely on wl_pointer.leave and
	wl_pointer.enter being in the same wl_pointer.frame.
	Compositor-specific policies may require the wl_pointer.leave and
	wl_pointer.enter event being split across multiple wl_pointer.frame
	groups.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-axis_source">
        <title>wl_pointer::axis_source
        - axis source event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>axis_source</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_pointer-enum-axis_source">wl_pointer::axis_source</link>
          (uint)
          
            - source of the axis event</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Source information for scroll and other axes.</para>
        <para>	This event does not occur on its own. It is sent before a
	wl_pointer.frame event and carries the source information for
	all events within that frame.</para>
        <para>	The source specifies how this event was generated. If the source is
	wl_pointer.axis_source.finger, a wl_pointer.axis_stop event will be
	sent when the user lifts the finger off the device.</para>
        <para>	If the source is wl_pointer.axis_source.wheel,
	wl_pointer.axis_source.wheel_tilt or
	wl_pointer.axis_source.continuous, a wl_pointer.axis_stop event may
	or may not be sent. Whether a compositor sends an axis_stop event
	for these sources is hardware-specific and implementation-dependent;
	clients must not rely on receiving an axis_stop event for these
	scroll sources and should treat scroll sequences from these scroll
	sources as unterminated by default.</para>
        <para>	This event is optional. If the source is unknown for a particular
	axis event sequence, no event is sent.
	Only one wl_pointer.axis_source event is permitted per frame.</para>
        <para>	The order of wl_pointer.axis_discrete and wl_pointer.axis_source is
	not guaranteed.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-axis_stop">
        <title>wl_pointer::axis_stop
        - axis stop event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>axis</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_pointer-enum-axis">wl_pointer::axis</link>
          (uint)
          
            - the axis stopped with this event</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Stop notification for scroll and other axes.</para>
        <para>	For some wl_pointer.axis_source types, a wl_pointer.axis_stop event
	is sent to notify a client that the axis sequence has terminated.
	This enables the client to implement kinetic scrolling.
	See the wl_pointer.axis_source documentation for information on when
	this event may be generated.</para>
        <para>	Any wl_pointer.axis events with the same axis_source after this
	event should be considered as the start of a new axis motion.</para>
        <para>	The timestamp is to be interpreted identical to the timestamp in the
	wl_pointer.axis event. The timestamp value may be the same as a
	preceding wl_pointer.axis event.
      </para>
      </section>
      <section id="protocol-spec-wl_pointer-event-axis_discrete">
        <title>wl_pointer::axis_discrete
        - axis click event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>axis</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_pointer-enum-axis">wl_pointer::axis</link>
          (uint)
          
            - axis type</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>discrete</term>
              <listitem>
                <simpara>int
            - number of steps</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Discrete step information for scroll and other axes.</para>
        <para>	This event carries the axis value of the wl_pointer.axis event in
	discrete steps (e.g. mouse wheel clicks).</para>
        <para>	This event does not occur on its own, it is coupled with a
	wl_pointer.axis event that represents this axis value on a
	continuous scale. The protocol guarantees that each axis_discrete
	event is always followed by exactly one axis event with the same
	axis number within the same wl_pointer.frame. Note that the protocol
	allows for other events to occur between the axis_discrete and
	its coupled axis event, including other axis_discrete or axis
	events.</para>
        <para>	This event is optional; continuous scrolling devices
	like two-finger scrolling on touchpads do not have discrete
	steps and do not generate this event.</para>
        <para>	The discrete value carries the directional information. e.g. a value
	of -2 is two steps towards the negative direction of this axis.</para>
        <para>	The axis number is identical to the axis number in the associated
	axis event.</para>
        <para>	The order of wl_pointer.axis_discrete and wl_pointer.axis_source is
	not guaranteed.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_pointer</title>
      <section id="protocol-spec-wl_pointer-enum-error">
        <title>wl_pointer::error</title>
        <para/>
        <variablelist>
          <varlistentry>
            <term>role</term>
            <listitem>
              <simpara>0
          - given wl_surface has another role</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_pointer-enum-button_state">
        <title>wl_pointer::button_state
        - physical button state</title>
        <para>
	Describes the physical state of a button that produced the button
	event.
      </para>
        <variablelist>
          <varlistentry>
            <term>released</term>
            <listitem>
              <simpara>0
          - the button is not pressed</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>pressed</term>
            <listitem>
              <simpara>1
          - the button is pressed</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_pointer-enum-axis">
        <title>wl_pointer::axis
        - axis types</title>
        <para>
	Describes the axis types of scroll events.
      </para>
        <variablelist>
          <varlistentry>
            <term>vertical_scroll</term>
            <listitem>
              <simpara>0
          - vertical axis</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>horizontal_scroll</term>
            <listitem>
              <simpara>1
          - horizontal axis</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_pointer-enum-axis_source">
        <title>wl_pointer::axis_source
        - axis source types</title>
        <para>
	Describes the source types for axis events. This indicates to the
	client how an axis event was physically generated; a client may
	adjust the user interface accordingly. For example, scroll events
	from a "finger" source may be in a smooth coordinate space with
	kinetic scrolling whereas a "wheel" source may be in discrete steps
	of a number of lines.</para>
        <para>	The "continuous" axis source is a device generating events in a
	continuous coordinate space, but using something other than a
	finger. One example for this source is button-based scrolling where
	the vertical motion of a device is converted to scroll events while
	a button is held down.</para>
        <para>	The "wheel tilt" axis source indicates that the actual device is a
	wheel but the scroll event is not caused by a rotation but a
	(usually sideways) tilt of the wheel.
      </para>
        <variablelist>
          <varlistentry>
            <term>wheel</term>
            <listitem>
              <simpara>0
          - a physical wheel rotation</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>finger</term>
            <listitem>
              <simpara>1
          - finger on a touch surface</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>continuous</term>
            <listitem>
              <simpara>2
          - continuous coordinate space</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>wheel_tilt</term>
            <listitem>
              <simpara>3
          - a physical wheel tilt</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_keyboard">
    <title>wl_keyboard
	- keyboard input device</title>
    <para>
      The wl_keyboard interface represents one or more keyboards
      associated with a seat.
    </para>
    <section>
      <title>Requests provided by wl_keyboard</title>
      <section id="protocol-spec-wl_keyboard-request-release">
        <title>wl_keyboard::release
        - release the keyboard object</title>
        <para>
          <variablelist/>
        </para>
        <para/>
      </section>
    </section>
    <section>
      <title>Events provided by wl_keyboard</title>
      <section id="protocol-spec-wl_keyboard-event-keymap">
        <title>wl_keyboard::keymap
        - keyboard mapping</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>format</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_keyboard-enum-keymap_format">wl_keyboard::keymap_format</link>
          (uint)
          
            - keymap format</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>fd</term>
              <listitem>
                <simpara>fd
            - keymap file descriptor</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>size</term>
              <listitem>
                <simpara>uint
            - keymap size, in bytes</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event provides a file descriptor to the client which can be
	memory-mapped to provide a keyboard mapping description.
      </para>
      </section>
      <section id="protocol-spec-wl_keyboard-event-enter">
        <title>wl_keyboard::enter
        - enter event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the enter event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - surface gaining keyboard focus</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>keys</term>
              <listitem>
                <simpara>array
            - the currently pressed keys</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notification that this seat's keyboard focus is on a certain
	surface.
      </para>
      </section>
      <section id="protocol-spec-wl_keyboard-event-leave">
        <title>wl_keyboard::leave
        - leave event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the leave event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - surface that lost keyboard focus</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notification that this seat's keyboard focus is no longer on
	a certain surface.</para>
        <para>	The leave notification is sent before the enter notification
	for the new focus.
      </para>
      </section>
      <section id="protocol-spec-wl_keyboard-event-key">
        <title>wl_keyboard::key
        - key event</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the key event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>key</term>
              <listitem>
                <simpara>uint
            - key that produced the event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>state</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_keyboard-enum-key_state">wl_keyboard::key_state</link>
          (uint)
          
            - physical state of the key</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	A key was pressed or released.
	The time argument is a timestamp with millisecond
	granularity, with an undefined base.
      </para>
      </section>
      <section id="protocol-spec-wl_keyboard-event-modifiers">
        <title>wl_keyboard::modifiers
        - modifier and group state</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the modifiers event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mods_depressed</term>
              <listitem>
                <simpara>uint
            - depressed modifiers</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mods_latched</term>
              <listitem>
                <simpara>uint
            - latched modifiers</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mods_locked</term>
              <listitem>
                <simpara>uint
            - locked modifiers</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>group</term>
              <listitem>
                <simpara>uint
            - keyboard layout</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Notifies clients that the modifier and/or group state has
	changed, and it should update its local state.
      </para>
      </section>
      <section id="protocol-spec-wl_keyboard-event-repeat_info">
        <title>wl_keyboard::repeat_info
        - repeat rate and delay</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>rate</term>
              <listitem>
                <simpara>int
            - the rate of repeating keys in characters per second</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>delay</term>
              <listitem>
                <simpara>int
            - delay in milliseconds since key down until repeating starts</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Informs the client about the keyboard's repeat rate and delay.</para>
        <para>	This event is sent as soon as the wl_keyboard object has been created,
	and is guaranteed to be received by the client before any key press
	event.</para>
        <para>	Negative values for either rate or delay are illegal. A rate of zero
	will disable any repeating (regardless of the value of delay).</para>
        <para>	This event can be sent later on as well with a new value if necessary,
	so clients should continue listening for the event past the creation
	of wl_keyboard.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_keyboard</title>
      <section id="protocol-spec-wl_keyboard-enum-keymap_format">
        <title>wl_keyboard::keymap_format
        - keyboard mapping format</title>
        <para>
	This specifies the format of the keymap provided to the
	client with the wl_keyboard.keymap event.
      </para>
        <variablelist>
          <varlistentry>
            <term>no_keymap</term>
            <listitem>
              <simpara>0
          - no keymap; client must understand how to interpret the raw keycode</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>xkb_v1</term>
            <listitem>
              <simpara>1
          - libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_keyboard-enum-key_state">
        <title>wl_keyboard::key_state
        - physical key state</title>
        <para>
	Describes the physical state of a key that produced the key event.
      </para>
        <variablelist>
          <varlistentry>
            <term>released</term>
            <listitem>
              <simpara>0
          - key is not pressed</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>pressed</term>
            <listitem>
              <simpara>1
          - key is pressed</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_touch">
    <title>wl_touch
	- touchscreen input device</title>
    <para>
      The wl_touch interface represents a touchscreen
      associated with a seat.</para>
    <para>      Touch interactions can consist of one or more contacts.
      For each contact, a series of events is generated, starting
      with a down event, followed by zero or more motion events,
      and ending with an up event. Events relating to the same
      contact point can be identified by the ID of the sequence.
    </para>
    <section>
      <title>Requests provided by wl_touch</title>
      <section id="protocol-spec-wl_touch-request-release">
        <title>wl_touch::release
        - release the touch object</title>
        <para>
          <variablelist/>
        </para>
        <para/>
      </section>
    </section>
    <section>
      <title>Events provided by wl_touch</title>
      <section id="protocol-spec-wl_touch-event-down">
        <title>wl_touch::down
        - touch down event and beginning of a touch sequence</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the touch down event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - surface touched</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>int
            - the unique ID of this touch point</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>fixed
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>fixed
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	A new touch point has appeared on the surface. This touch point is
	assigned a unique ID. Future events from this touch point reference
	this ID. The ID ceases to be valid after a touch up event and may be
	reused in the future.
      </para>
      </section>
      <section id="protocol-spec-wl_touch-event-up">
        <title>wl_touch::up
        - end of a touch event sequence</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>serial</term>
              <listitem>
                <simpara>uint
            - serial number of the touch up event</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>int
            - the unique ID of this touch point</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The touch point has disappeared. No further events will be sent for
	this touch point and the touch point's ID is released and may be
	reused in a future touch down event.
      </para>
      </section>
      <section id="protocol-spec-wl_touch-event-motion">
        <title>wl_touch::motion
        - update of touch point coordinates</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>time</term>
              <listitem>
                <simpara>uint
            - timestamp with millisecond granularity</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>int
            - the unique ID of this touch point</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>fixed
            - surface-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>fixed
            - surface-local y coordinate</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	A touch point has changed coordinates.
      </para>
      </section>
      <section id="protocol-spec-wl_touch-event-frame">
        <title>wl_touch::frame
        - end of touch frame event</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Indicates the end of a set of events that logically belong together.
	A client is expected to accumulate the data in all events within the
	frame before proceeding.</para>
        <para>	A wl_touch.frame terminates at least one event but otherwise no
	guarantee is provided about the set of events within a frame. A client
	must assume that any state not updated in a frame is unchanged from the
	previously known state.
      </para>
      </section>
      <section id="protocol-spec-wl_touch-event-cancel">
        <title>wl_touch::cancel
        - touch session cancelled</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Sent if the compositor decides the touch stream is a global
	gesture. No further events are sent to the clients from that
	particular gesture. Touch cancellation applies to all touch points
	currently active on this client's surface. The client is
	responsible for finalizing the touch points, future touch points on
	this surface may reuse the touch point ID.
      </para>
      </section>
      <section id="protocol-spec-wl_touch-event-shape">
        <title>wl_touch::shape
        - update shape of touch point</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>int
            - the unique ID of this touch point</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>major</term>
              <listitem>
                <simpara>fixed
            - length of the major axis in surface-local coordinates</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>minor</term>
              <listitem>
                <simpara>fixed
            - length of the minor axis in surface-local coordinates</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Sent when a touchpoint has changed its shape.</para>
        <para>	This event does not occur on its own. It is sent before a
	wl_touch.frame event and carries the new shape information for
	any previously reported, or new touch points of that frame.</para>
        <para>	Other events describing the touch point such as wl_touch.down,
	wl_touch.motion or wl_touch.orientation may be sent within the
	same wl_touch.frame. A client should treat these events as a single
	logical touch point update. The order of wl_touch.shape,
	wl_touch.orientation and wl_touch.motion is not guaranteed.
	A wl_touch.down event is guaranteed to occur before the first
	wl_touch.shape event for this touch ID but both events may occur within
	the same wl_touch.frame.</para>
        <para>	A touchpoint shape is approximated by an ellipse through the major and
	minor axis length. The major axis length describes the longer diameter
	of the ellipse, while the minor axis length describes the shorter
	diameter. Major and minor are orthogonal and both are specified in
	surface-local coordinates. The center of the ellipse is always at the
	touchpoint location as reported by wl_touch.down or wl_touch.move.</para>
        <para>	This event is only sent by the compositor if the touch device supports
	shape reports. The client has to make reasonable assumptions about the
	shape if it did not receive this event.
      </para>
      </section>
      <section id="protocol-spec-wl_touch-event-orientation">
        <title>wl_touch::orientation
        - update orientation of touch point</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>int
            - the unique ID of this touch point</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>orientation</term>
              <listitem>
                <simpara>fixed
            - angle between major axis and positive surface y-axis in degrees</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Sent when a touchpoint has changed its orientation.</para>
        <para>	This event does not occur on its own. It is sent before a
	wl_touch.frame event and carries the new shape information for
	any previously reported, or new touch points of that frame.</para>
        <para>	Other events describing the touch point such as wl_touch.down,
	wl_touch.motion or wl_touch.shape may be sent within the
	same wl_touch.frame. A client should treat these events as a single
	logical touch point update. The order of wl_touch.shape,
	wl_touch.orientation and wl_touch.motion is not guaranteed.
	A wl_touch.down event is guaranteed to occur before the first
	wl_touch.orientation event for this touch ID but both events may occur
	within the same wl_touch.frame.</para>
        <para>	The orientation describes the clockwise angle of a touchpoint's major
	axis to the positive surface y-axis and is normalized to the -180 to
	+180 degree range. The granularity of orientation depends on the touch
	device, some devices only support binary rotation values between 0 and
	90 degrees.</para>
        <para>	This event is only sent by the compositor if the touch device supports
	orientation reports.
      </para>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_output">
    <title>wl_output
	- compositor output region</title>
    <para>
      An output describes part of the compositor geometry.  The
      compositor works in the 'compositor coordinate system' and an
      output corresponds to a rectangular area in that space that is
      actually visible.  This typically corresponds to a monitor that
      displays part of the compositor space.  This object is published
      as global during start up, or when a monitor is hotplugged.
    </para>
    <section>
      <title>Requests provided by wl_output</title>
      <section id="protocol-spec-wl_output-request-release">
        <title>wl_output::release
        - release the output object</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Using this request a client can tell the server that it is not going to
	use the output object anymore.
      </para>
      </section>
    </section>
    <section>
      <title>Events provided by wl_output</title>
      <section id="protocol-spec-wl_output-event-geometry">
        <title>wl_output::geometry
        - properties of the output</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - x position within the global compositor space</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - y position within the global compositor space</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>physical_width</term>
              <listitem>
                <simpara>int
            - width in millimeters of the output</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>physical_height</term>
              <listitem>
                <simpara>int
            - height in millimeters of the output</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>subpixel</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output-enum-subpixel">wl_output::subpixel</link>
          (int)
          
            - subpixel orientation of the output</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>make</term>
              <listitem>
                <simpara>string
            - textual description of the manufacturer</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>model</term>
              <listitem>
                <simpara>string
            - textual description of the model</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>transform</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output-enum-transform">wl_output::transform</link>
          (int)
          
            - transform that maps framebuffer to output</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The geometry event describes geometric properties of the output.
	The event is sent when binding to the output object and whenever
	any of the properties change.</para>
        <para>	The physical size can be set to zero if it doesn't make sense for this
	output (e.g. for projectors or virtual outputs).
      </para>
      </section>
      <section id="protocol-spec-wl_output-event-mode">
        <title>wl_output::mode
        - advertise available modes for the output</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>flags</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_output-enum-mode">wl_output::mode</link>
          (uint)
          
            - bitfield of mode flags</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>width</term>
              <listitem>
                <simpara>int
            - width of the mode in hardware units</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>height</term>
              <listitem>
                <simpara>int
            - height of the mode in hardware units</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>refresh</term>
              <listitem>
                <simpara>int
            - vertical refresh rate in mHz</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The mode event describes an available mode for the output.</para>
        <para>	The event is sent when binding to the output object and there
	will always be one mode, the current mode.  The event is sent
	again if an output changes mode, for the mode that is now
	current.  In other words, the current mode is always the last
	mode that was received with the current flag set.</para>
        <para>	The size of a mode is given in physical hardware units of
	the output device. This is not necessarily the same as
	the output size in the global compositor space. For instance,
	the output may be scaled, as described in wl_output.scale,
	or transformed, as described in wl_output.transform.
      </para>
      </section>
      <section id="protocol-spec-wl_output-event-done">
        <title>wl_output::done
        - sent all information about output</title>
        <para>
          <variablelist/>
        </para>
        <para>
	This event is sent after all other properties have been
	sent after binding to the output object and after any
	other property changes done after that. This allows
	changes to the output properties to be seen as
	atomic, even if they happen via multiple events.
      </para>
      </section>
      <section id="protocol-spec-wl_output-event-scale">
        <title>wl_output::scale
        - output scaling properties</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>factor</term>
              <listitem>
                <simpara>int
            - scaling factor of output</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This event contains scaling geometry information
	that is not in the geometry event. It may be sent after
	binding the output object or if the output scale changes
	later. If it is not sent, the client should assume a
	scale of 1.</para>
        <para>	A scale larger than 1 means that the compositor will
	automatically scale surface buffers by this amount
	when rendering. This is used for very high resolution
	displays where applications rendering at the native
	resolution would be too small to be legible.</para>
        <para>	It is intended that scaling aware clients track the
	current output of a surface, and if it is on a scaled
	output it should use wl_surface.set_buffer_scale with
	the scale of the output. That way the compositor can
	avoid scaling the surface, and the client can supply
	a higher detail image.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_output</title>
      <section id="protocol-spec-wl_output-enum-subpixel">
        <title>wl_output::subpixel
        - subpixel geometry information</title>
        <para>
	This enumeration describes how the physical
	pixels on an output are laid out.
      </para>
        <variablelist>
          <varlistentry>
            <term>unknown</term>
            <listitem>
              <simpara>0
          - unknown geometry</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>none</term>
            <listitem>
              <simpara>1
          - no geometry</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>horizontal_rgb</term>
            <listitem>
              <simpara>2
          - horizontal RGB</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>horizontal_bgr</term>
            <listitem>
              <simpara>3
          - horizontal BGR</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>vertical_rgb</term>
            <listitem>
              <simpara>4
          - vertical RGB</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>vertical_bgr</term>
            <listitem>
              <simpara>5
          - vertical BGR</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_output-enum-transform">
        <title>wl_output::transform
        - transform from framebuffer to output</title>
        <para>
	This describes the transform that a compositor will apply to a
	surface to compensate for the rotation or mirroring of an
	output device.</para>
        <para>	The flipped values correspond to an initial flip around a
	vertical axis followed by rotation.</para>
        <para>	The purpose is mainly to allow clients to render accordingly and
	tell the compositor, so that for fullscreen surfaces, the
	compositor will still be able to scan out directly from client
	surfaces.
      </para>
        <variablelist>
          <varlistentry>
            <term>normal</term>
            <listitem>
              <simpara>0
          - no transform</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>90</term>
            <listitem>
              <simpara>1
          - 90 degrees counter-clockwise</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>180</term>
            <listitem>
              <simpara>2
          - 180 degrees counter-clockwise</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>270</term>
            <listitem>
              <simpara>3
          - 270 degrees counter-clockwise</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>flipped</term>
            <listitem>
              <simpara>4
          - 180 degree flip around a vertical axis</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>flipped_90</term>
            <listitem>
              <simpara>5
          - flip and rotate 90 degrees counter-clockwise</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>flipped_180</term>
            <listitem>
              <simpara>6
          - flip and rotate 180 degrees counter-clockwise</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>flipped_270</term>
            <listitem>
              <simpara>7
          - flip and rotate 270 degrees counter-clockwise</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section id="protocol-spec-wl_output-enum-mode">
        <title>wl_output::mode
        - bitfield
      
        - mode information</title>
        <para>
	These flags describe properties of an output mode.
	They are used in the flags bitfield of the mode event.
      </para>
        <variablelist>
          <varlistentry>
            <term>current</term>
            <listitem>
              <simpara>0x1
          - indicates this is the current mode</simpara>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>preferred</term>
            <listitem>
              <simpara>0x2
          - indicates this is the preferred mode</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_region">
    <title>wl_region
	- region interface</title>
    <para>
      A region object describes an area.</para>
    <para>      Region objects are used to describe the opaque and input
      regions of a surface.
    </para>
    <section>
      <title>Requests provided by wl_region</title>
      <section id="protocol-spec-wl_region-request-destroy">
        <title>wl_region::destroy
        - destroy region</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Destroy the region.  This will invalidate the object ID.
      </para>
      </section>
      <section id="protocol-spec-wl_region-request-add">
        <title>wl_region::add
        - add rectangle to region</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - region-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - region-local y coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>width</term>
              <listitem>
                <simpara>int
            - rectangle width</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>height</term>
              <listitem>
                <simpara>int
            - rectangle height</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Add the specified rectangle to the region.
      </para>
      </section>
      <section id="protocol-spec-wl_region-request-subtract">
        <title>wl_region::subtract
        - subtract rectangle from region</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - region-local x coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - region-local y coordinate</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>width</term>
              <listitem>
                <simpara>int
            - rectangle width</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>height</term>
              <listitem>
                <simpara>int
            - rectangle height</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Subtract the specified rectangle from the region.
      </para>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_subcompositor">
    <title>wl_subcompositor
	- sub-surface compositing</title>
    <para>
      The global interface exposing sub-surface compositing capabilities.
      A wl_surface, that has sub-surfaces associated, is called the
      parent surface. Sub-surfaces can be arbitrarily nested and create
      a tree of sub-surfaces.</para>
    <para>      The root surface in a tree of sub-surfaces is the main
      surface. The main surface cannot be a sub-surface, because
      sub-surfaces must always have a parent.</para>
    <para>      A main surface with its sub-surfaces forms a (compound) window.
      For window management purposes, this set of wl_surface objects is
      to be considered as a single window, and it should also behave as
      such.</para>
    <para>      The aim of sub-surfaces is to offload some of the compositing work
      within a window from clients to the compositor. A prime example is
      a video player with decorations and video in separate wl_surface
      objects. This should allow the compositor to pass YUV video buffer
      processing to dedicated overlay hardware when possible.
    </para>
    <section>
      <title>Requests provided by wl_subcompositor</title>
      <section id="protocol-spec-wl_subcompositor-request-destroy">
        <title>wl_subcompositor::destroy
        - unbind from the subcompositor interface</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Informs the server that the client will not be using this
	protocol object anymore. This does not affect any other
	objects, wl_subsurface objects included.
      </para>
      </section>
      <section id="protocol-spec-wl_subcompositor-request-get_subsurface">
        <title>wl_subcompositor::get_subsurface
        - give a surface the role sub-surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>id</term>
              <listitem>
                <simpara>
          id for the new
          <link linkend="protocol-spec-wl_subsurface">wl_subsurface</link>
            - the new sub-surface object ID</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>surface</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - the surface to be turned into a sub-surface</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>parent</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - the parent surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	Create a sub-surface interface for the given surface, and
	associate it with the given parent surface. This turns a
	plain wl_surface into a sub-surface.</para>
        <para>	The to-be sub-surface must not already have another role, and it
	must not have an existing wl_subsurface object. Otherwise a protocol
	error is raised.</para>
        <para>	Adding sub-surfaces to a parent is a double-buffered operation on the
	parent (see wl_surface.commit). The effect of adding a sub-surface
	becomes visible on the next time the state of the parent surface is
	applied.</para>
        <para>	This request modifies the behaviour of wl_surface.commit request on
	the sub-surface, see the documentation on wl_subsurface interface.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_subcompositor</title>
      <section id="protocol-spec-wl_subcompositor-enum-error">
        <title>wl_subcompositor::error</title>
        <para/>
        <variablelist>
          <varlistentry>
            <term>bad_surface</term>
            <listitem>
              <simpara>0
          - the to-be sub-surface is invalid</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
  <section id="protocol-spec-wl_subsurface">
    <title>wl_subsurface
	- sub-surface interface to a wl_surface</title>
    <para>
      An additional interface to a wl_surface object, which has been
      made a sub-surface. A sub-surface has one parent surface. A
      sub-surface's size and position are not limited to that of the parent.
      Particularly, a sub-surface is not automatically clipped to its
      parent's area.</para>
    <para>      A sub-surface becomes mapped, when a non-NULL wl_buffer is applied
      and the parent surface is mapped. The order of which one happens
      first is irrelevant. A sub-surface is hidden if the parent becomes
      hidden, or if a NULL wl_buffer is applied. These rules apply
      recursively through the tree of surfaces.</para>
    <para>      The behaviour of a wl_surface.commit request on a sub-surface
      depends on the sub-surface's mode. The possible modes are
      synchronized and desynchronized, see methods
      wl_subsurface.set_sync and wl_subsurface.set_desync. Synchronized
      mode caches the wl_surface state to be applied when the parent's
      state gets applied, and desynchronized mode applies the pending
      wl_surface state directly. A sub-surface is initially in the
      synchronized mode.</para>
    <para>      Sub-surfaces have also other kind of state, which is managed by
      wl_subsurface requests, as opposed to wl_surface requests. This
      state includes the sub-surface position relative to the parent
      surface (wl_subsurface.set_position), and the stacking order of
      the parent and its sub-surfaces (wl_subsurface.place_above and
      .place_below). This state is applied when the parent surface's
      wl_surface state is applied, regardless of the sub-surface's mode.
      As the exception, set_sync and set_desync are effective immediately.</para>
    <para>      The main surface can be thought to be always in desynchronized mode,
      since it does not have a parent in the sub-surfaces sense.</para>
    <para>      Even if a sub-surface is in desynchronized mode, it will behave as
      in synchronized mode, if its parent surface behaves as in
      synchronized mode. This rule is applied recursively throughout the
      tree of surfaces. This means, that one can set a sub-surface into
      synchronized mode, and then assume that all its child and grand-child
      sub-surfaces are synchronized, too, without explicitly setting them.</para>
    <para>      If the wl_surface associated with the wl_subsurface is destroyed, the
      wl_subsurface object becomes inert. Note, that destroying either object
      takes effect immediately. If you need to synchronize the removal
      of a sub-surface to the parent surface update, unmap the sub-surface
      first by attaching a NULL wl_buffer, update parent, and then destroy
      the sub-surface.</para>
    <para>      If the parent wl_surface object is destroyed, the sub-surface is
      unmapped.
    </para>
    <section>
      <title>Requests provided by wl_subsurface</title>
      <section id="protocol-spec-wl_subsurface-request-destroy">
        <title>wl_subsurface::destroy
        - remove sub-surface interface</title>
        <para>
          <variablelist/>
        </para>
        <para>
	The sub-surface interface is removed from the wl_surface object
	that was turned into a sub-surface with a
	wl_subcompositor.get_subsurface request. The wl_surface's association
	to the parent is deleted, and the wl_surface loses its role as
	a sub-surface. The wl_surface is unmapped immediately.
      </para>
      </section>
      <section id="protocol-spec-wl_subsurface-request-set_position">
        <title>wl_subsurface::set_position
        - reposition the sub-surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>x</term>
              <listitem>
                <simpara>int
            - x coordinate in the parent surface</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>y</term>
              <listitem>
                <simpara>int
            - y coordinate in the parent surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This schedules a sub-surface position change.
	The sub-surface will be moved so that its origin (top left
	corner pixel) will be at the location x, y of the parent surface
	coordinate system. The coordinates are not restricted to the parent
	surface area. Negative values are allowed.</para>
        <para>	The scheduled coordinates will take effect whenever the state of the
	parent surface is applied. When this happens depends on whether the
	parent surface is in synchronized mode or not. See
	wl_subsurface.set_sync and wl_subsurface.set_desync for details.</para>
        <para>	If more than one set_position request is invoked by the client before
	the commit of the parent surface, the position of a new request always
	replaces the scheduled position from any previous request.</para>
        <para>	The initial position is 0, 0.
      </para>
      </section>
      <section id="protocol-spec-wl_subsurface-request-place_above">
        <title>wl_subsurface::place_above
        - restack the sub-surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>sibling</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - the reference surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	This sub-surface is taken from the stack, and put back just
	above the reference surface, changing the z-order of the sub-surfaces.
	The reference surface must be one of the sibling surfaces, or the
	parent surface. Using any other surface, including this sub-surface,
	will cause a protocol error.</para>
        <para>	The z-order is double-buffered. Requests are handled in order and
	applied immediately to a pending state. The final pending state is
	copied to the active state the next time the state of the parent
	surface is applied. When this happens depends on whether the parent
	surface is in synchronized mode or not. See wl_subsurface.set_sync and
	wl_subsurface.set_desync for details.</para>
        <para>	A new sub-surface is initially added as the top-most in the stack
	of its siblings and parent.
      </para>
      </section>
      <section id="protocol-spec-wl_subsurface-request-place_below">
        <title>wl_subsurface::place_below
        - restack the sub-surface</title>
        <para>
          <variablelist>
            <varlistentry>
              <term>sibling</term>
              <listitem>
                <simpara><link linkend="protocol-spec-wl_surface">wl_surface</link>
            - the reference surface</simpara>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>
	The sub-surface is placed just below the reference surface.
	See wl_subsurface.place_above.
      </para>
      </section>
      <section id="protocol-spec-wl_subsurface-request-set_sync">
        <title>wl_subsurface::set_sync
        - set sub-surface to synchronized mode</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Change the commit behaviour of the sub-surface to synchronized
	mode, also described as the parent dependent mode.</para>
        <para>	In synchronized mode, wl_surface.commit on a sub-surface will
	accumulate the committed state in a cache, but the state will
	not be applied and hence will not change the compositor output.
	The cached state is applied to the sub-surface immediately after
	the parent surface's state is applied. This ensures atomic
	updates of the parent and all its synchronized sub-surfaces.
	Applying the cached state will invalidate the cache, so further
	parent surface commits do not (re-)apply old state.</para>
        <para>	See wl_subsurface for the recursive effect of this mode.
      </para>
      </section>
      <section id="protocol-spec-wl_subsurface-request-set_desync">
        <title>wl_subsurface::set_desync
        - set sub-surface to desynchronized mode</title>
        <para>
          <variablelist/>
        </para>
        <para>
	Change the commit behaviour of the sub-surface to desynchronized
	mode, also described as independent or freely running mode.</para>
        <para>	In desynchronized mode, wl_surface.commit on a sub-surface will
	apply the pending state directly, without caching, as happens
	normally with a wl_surface. Calling wl_surface.commit on the
	parent surface has no effect on the sub-surface's wl_surface
	state. This mode allows a sub-surface to be updated on its own.</para>
        <para>	If cached state exists when wl_surface.commit is called in
	desynchronized mode, the pending state is added to the cached
	state, and applied as a whole. This invalidates the cache.</para>
        <para>	Note: even if a sub-surface is set to desynchronized, a parent
	sub-surface may override it to behave as synchronized. For details,
	see wl_subsurface.</para>
        <para>	If a surface's parent surface behaves as desynchronized, then
	the cached state is applied on set_desync.
      </para>
      </section>
    </section>
    <section>
      <title>Enums provided by wl_subsurface</title>
      <section id="protocol-spec-wl_subsurface-enum-error">
        <title>wl_subsurface::error</title>
        <para/>
        <variablelist>
          <varlistentry>
            <term>bad_surface</term>
            <listitem>
              <simpara>0
          - wl_surface is not a sibling or the parent</simpara>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
  </section>
</appendix>
